package android.support.test {

  public final class InstrumentationRegistry {
    method public static android.os.Bundle getArguments();
    method public static android.content.Context getContext();
    method public static android.app.Instrumentation getInstrumentation();
    method public static android.content.Context getTargetContext();
    method public static void registerInstance(android.app.Instrumentation, android.os.Bundle);
  }

}

package android.support.test.annotation {

  public abstract class Beta implements java.lang.annotation.Annotation {
  }

  public abstract class UiThreadTest implements java.lang.annotation.Annotation {
  }

}

package android.support.test.espresso {

  public final class AmbiguousViewMatcherException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
  }

  public static class AmbiguousViewMatcherException.Builder {
    ctor public AmbiguousViewMatcherException.Builder();
    method public android.support.test.espresso.AmbiguousViewMatcherException build();
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder from(android.support.test.espresso.AmbiguousViewMatcherException);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder includeViewHierarchy(boolean);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder withOtherAmbiguousViews(android.view.View...);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder withRootView(android.view.View);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder withView1(android.view.View);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder withView2(android.view.View);
    method public android.support.test.espresso.AmbiguousViewMatcherException.Builder withViewMatcher(org.hamcrest.Matcher<? super android.view.View>);
  }

  public final class AppNotIdleException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    method public static deprecated android.support.test.espresso.AppNotIdleException create(java.util.List<java.lang.String>, int, int);
    method public static android.support.test.espresso.AppNotIdleException create(java.util.List<java.lang.String>, java.lang.String);
  }

  public class DataInteraction {
    method public android.support.test.espresso.DataInteraction atPosition(java.lang.Integer);
    method public android.support.test.espresso.ViewInteraction check(android.support.test.espresso.ViewAssertion);
    method public android.support.test.espresso.DataInteraction inAdapterView(org.hamcrest.Matcher<android.view.View>);
    method public android.support.test.espresso.DataInteraction inRoot(org.hamcrest.Matcher<android.support.test.espresso.Root>);
    method public android.support.test.espresso.DataInteraction onChildView(org.hamcrest.Matcher<android.view.View>);
    method public android.support.test.espresso.ViewInteraction perform(android.support.test.espresso.ViewAction...);
    method public android.support.test.espresso.DataInteraction usingAdapterViewProtocol(android.support.test.espresso.action.AdapterViewProtocol);
  }

  public static final class DataInteraction.DisplayDataMatcher extends org.hamcrest.TypeSafeMatcher {
    method public void describeTo(org.hamcrest.Description);
    method public static android.support.test.espresso.DataInteraction.DisplayDataMatcher displayDataMatcher(org.hamcrest.Matcher<android.view.View>, org.hamcrest.Matcher<? extends java.lang.Object>, org.hamcrest.Matcher<android.support.test.espresso.Root>, android.support.test.espresso.util.EspressoOptional<java.lang.Integer>, android.support.test.espresso.action.AdapterViewProtocol);
    method public boolean matchesSafely(android.view.View);
  }

  public final class Espresso {
    method public static void closeSoftKeyboard();
    method public static deprecated java.util.List<android.support.test.espresso.IdlingResource> getIdlingResources();
    method public static android.support.test.espresso.DataInteraction onData(org.hamcrest.Matcher<? extends java.lang.Object>);
    method public static <T> T onIdle(java.util.concurrent.Callable<T>);
    method public static void onIdle();
    method public static android.support.test.espresso.ViewInteraction onView(org.hamcrest.Matcher<android.view.View>);
    method public static void openActionBarOverflowOrOptionsMenu(android.content.Context);
    method public static void openContextualActionModeOverflowMenu();
    method public static void pressBack();
    method public static void pressBackUnconditionally();
    method public static deprecated boolean registerIdlingResources(android.support.test.espresso.IdlingResource...);
    method public static deprecated void registerLooperAsIdlingResource(android.os.Looper);
    method public static deprecated void registerLooperAsIdlingResource(android.os.Looper, boolean);
    method public static void setFailureHandler(android.support.test.espresso.FailureHandler);
    method public static deprecated boolean unregisterIdlingResources(android.support.test.espresso.IdlingResource...);
  }

  public abstract interface EspressoException {
  }

  public abstract interface FailureHandler {
    method public abstract void handle(java.lang.Throwable, org.hamcrest.Matcher<android.view.View>);
  }

  public final class IdlingPolicies {
    method public static android.support.test.espresso.IdlingPolicy getDynamicIdlingResourceErrorPolicy();
    method public static android.support.test.espresso.IdlingPolicy getDynamicIdlingResourceWarningPolicy();
    method public static android.support.test.espresso.IdlingPolicy getMasterIdlingPolicy();
    method public static void setIdlingResourceTimeout(long, java.util.concurrent.TimeUnit);
    method public static void setMasterPolicyTimeout(long, java.util.concurrent.TimeUnit);
    method public static void setMasterPolicyTimeoutWhenDebuggerAttached(boolean);
  }

  public final class IdlingPolicy {
    method public long getIdleTimeout();
    method public java.util.concurrent.TimeUnit getIdleTimeoutUnit();
    method public void handleTimeout(java.util.List<java.lang.String>, java.lang.String);
  }

  public final class IdlingRegistry {
    method public static android.support.test.espresso.IdlingRegistry getInstance();
    method public java.util.Collection<android.os.Looper> getLoopers();
    method public java.util.Collection<android.support.test.espresso.IdlingResource> getResources();
    method public boolean register(android.support.test.espresso.IdlingResource...);
    method public void registerLooperAsIdlingResource(android.os.Looper);
    method public boolean unregister(android.support.test.espresso.IdlingResource...);
  }

  public abstract interface IdlingResource {
    method public abstract java.lang.String getName();
    method public abstract boolean isIdleNow();
    method public abstract void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource.ResourceCallback);
  }

  public static abstract interface IdlingResource.ResourceCallback {
    method public abstract void onTransitionToIdle();
  }

  public final class IdlingResourceTimeoutException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public IdlingResourceTimeoutException(java.util.List<java.lang.String>);
  }

  public final class InjectEventSecurityException extends java.lang.Exception implements android.support.test.espresso.EspressoException {
    ctor public InjectEventSecurityException(java.lang.String);
    ctor public InjectEventSecurityException(java.lang.Throwable);
    ctor public InjectEventSecurityException(java.lang.String, java.lang.Throwable);
  }

  public final class NoActivityResumedException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public NoActivityResumedException(java.lang.String);
    ctor public NoActivityResumedException(java.lang.String, java.lang.Throwable);
  }

  public final class NoMatchingRootException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    method public static android.support.test.espresso.NoMatchingRootException create(org.hamcrest.Matcher<android.support.test.espresso.Root>, java.util.List<android.support.test.espresso.Root>);
  }

  public final class NoMatchingViewException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    method public java.lang.String getViewMatcherDescription();
  }

  public static class NoMatchingViewException.Builder {
    ctor public NoMatchingViewException.Builder();
    method public android.support.test.espresso.NoMatchingViewException build();
    method public android.support.test.espresso.NoMatchingViewException.Builder from(android.support.test.espresso.NoMatchingViewException);
    method public android.support.test.espresso.NoMatchingViewException.Builder includeViewHierarchy(boolean);
    method public android.support.test.espresso.NoMatchingViewException.Builder withAdapterViewWarning(android.support.test.espresso.util.EspressoOptional<java.lang.String>);
    method public android.support.test.espresso.NoMatchingViewException.Builder withAdapterViews(java.util.List<android.view.View>);
    method public android.support.test.espresso.NoMatchingViewException.Builder withRootView(android.view.View);
    method public android.support.test.espresso.NoMatchingViewException.Builder withViewMatcher(org.hamcrest.Matcher<? super android.view.View>);
  }

  public final class PerformException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    method public java.lang.String getActionDescription();
    method public java.lang.String getViewDescription();
  }

  public static class PerformException.Builder {
    ctor public PerformException.Builder();
    method public android.support.test.espresso.PerformException build();
    method public android.support.test.espresso.PerformException.Builder from(android.support.test.espresso.PerformException);
    method public android.support.test.espresso.PerformException.Builder withActionDescription(java.lang.String);
    method public android.support.test.espresso.PerformException.Builder withCause(java.lang.Throwable);
    method public android.support.test.espresso.PerformException.Builder withViewDescription(java.lang.String);
  }

  public final class Root {
    method public android.view.View getDecorView();
    method public android.support.test.espresso.util.EspressoOptional<android.view.WindowManager.LayoutParams> getWindowLayoutParams();
    method public boolean isReady();
  }

  public static class Root.Builder {
    ctor public Root.Builder();
    method public android.support.test.espresso.Root build();
    method public android.support.test.espresso.Root.Builder withDecorView(android.view.View);
    method public android.support.test.espresso.Root.Builder withWindowLayoutParams(android.view.WindowManager.LayoutParams);
  }

  public abstract interface UiController {
    method public abstract boolean injectKeyEvent(android.view.KeyEvent) throws android.support.test.espresso.InjectEventSecurityException;
    method public abstract boolean injectMotionEvent(android.view.MotionEvent) throws android.support.test.espresso.InjectEventSecurityException;
    method public abstract boolean injectString(java.lang.String) throws android.support.test.espresso.InjectEventSecurityException;
    method public abstract void loopMainThreadForAtLeast(long);
    method public abstract void loopMainThreadUntilIdle();
  }

  public abstract interface ViewAction {
    method public abstract org.hamcrest.Matcher<android.view.View> getConstraints();
    method public abstract java.lang.String getDescription();
    method public abstract void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public abstract interface ViewAssertion {
    method public abstract void check(android.view.View, android.support.test.espresso.NoMatchingViewException);
  }

  public abstract interface ViewFinder {
    method public abstract android.view.View getView() throws android.support.test.espresso.AmbiguousViewMatcherException, android.support.test.espresso.NoMatchingViewException;
  }

  public final class ViewInteraction {
    method public android.support.test.espresso.ViewInteraction check(android.support.test.espresso.ViewAssertion);
    method public android.support.test.espresso.ViewInteraction inRoot(org.hamcrest.Matcher<android.support.test.espresso.Root>);
    method public android.support.test.espresso.ViewInteraction noActivity();
    method public android.support.test.espresso.ViewInteraction perform(android.support.test.espresso.ViewAction...);
    method public android.support.test.espresso.ViewInteraction withFailureHandler(android.support.test.espresso.FailureHandler);
  }

  public abstract interface ViewInteractionComponent {
    method public abstract android.support.test.espresso.ViewInteraction viewInteraction();
  }

}

package android.support.test.espresso.accessibility {

  public final class AccessibilityChecks {
    method public static android.support.test.espresso.ViewAssertion accessibilityAssertion();
    method public static com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator enable();
  }

}

package android.support.test.espresso.action {

  public final class AdapterDataLoaderAction implements android.support.test.espresso.ViewAction {
    ctor public AdapterDataLoaderAction(org.hamcrest.Matcher<? extends java.lang.Object>, android.support.test.espresso.util.EspressoOptional<java.lang.Integer>, android.support.test.espresso.action.AdapterViewProtocol);
    method public android.support.test.espresso.action.AdapterViewProtocol.AdaptedData getAdaptedData();
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public abstract interface AdapterViewProtocol {
    method public abstract java.lang.Iterable<android.support.test.espresso.action.AdapterViewProtocol.AdaptedData> getDataInAdapterView(android.widget.AdapterView<? extends android.widget.Adapter>);
    method public abstract android.support.test.espresso.util.EspressoOptional<android.support.test.espresso.action.AdapterViewProtocol.AdaptedData> getDataRenderedByView(android.widget.AdapterView<? extends android.widget.Adapter>, android.view.View);
    method public abstract boolean isDataRenderedWithinAdapterView(android.widget.AdapterView<? extends android.widget.Adapter>, android.support.test.espresso.action.AdapterViewProtocol.AdaptedData);
    method public abstract void makeDataRenderedWithinAdapterView(android.widget.AdapterView<? extends android.widget.Adapter>, android.support.test.espresso.action.AdapterViewProtocol.AdaptedData);
  }

  public static class AdapterViewProtocol.AdaptedData {
    method public java.lang.Object getData();
    field public final deprecated java.lang.Object data;
    field public final java.lang.Object opaqueToken;
  }

  public static class AdapterViewProtocol.AdaptedData.Builder {
    ctor public AdapterViewProtocol.AdaptedData.Builder();
    method public android.support.test.espresso.action.AdapterViewProtocol.AdaptedData build();
    method public android.support.test.espresso.action.AdapterViewProtocol.AdaptedData.Builder withData(java.lang.Object);
    method public android.support.test.espresso.action.AdapterViewProtocol.AdaptedData.Builder withDataFunction(android.support.test.espresso.action.AdapterViewProtocol.DataFunction);
    method public android.support.test.espresso.action.AdapterViewProtocol.AdaptedData.Builder withOpaqueToken(java.lang.Object);
  }

  public static abstract interface AdapterViewProtocol.DataFunction {
    method public abstract java.lang.Object getData();
  }

  public final class AdapterViewProtocols {
    method public static android.support.test.espresso.action.AdapterViewProtocol standardProtocol();
  }

  public final class CloseKeyboardAction implements android.support.test.espresso.ViewAction {
    ctor public CloseKeyboardAction();
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public abstract interface CoordinatesProvider {
    method public abstract float[] calculateCoordinates(android.view.View);
  }

  public final class EditorAction implements android.support.test.espresso.ViewAction {
    ctor public EditorAction();
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class EspressoKey {
    method public int getKeyCode();
    method public int getMetaState();
  }

  public static class EspressoKey.Builder {
    ctor public EspressoKey.Builder();
    method public android.support.test.espresso.action.EspressoKey build();
    method public android.support.test.espresso.action.EspressoKey.Builder withAltPressed(boolean);
    method public android.support.test.espresso.action.EspressoKey.Builder withCtrlPressed(boolean);
    method public android.support.test.espresso.action.EspressoKey.Builder withKeyCode(int);
    method public android.support.test.espresso.action.EspressoKey.Builder withShiftPressed(boolean);
  }

  public final class GeneralClickAction implements android.support.test.espresso.ViewAction {
    ctor public deprecated GeneralClickAction(android.support.test.espresso.action.Tapper, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.PrecisionDescriber);
    ctor public GeneralClickAction(android.support.test.espresso.action.Tapper, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.PrecisionDescriber, int, int);
    ctor public deprecated GeneralClickAction(android.support.test.espresso.action.Tapper, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.PrecisionDescriber, android.support.test.espresso.ViewAction);
    ctor public GeneralClickAction(android.support.test.espresso.action.Tapper, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.PrecisionDescriber, int, int, android.support.test.espresso.ViewAction);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public class GeneralLocation extends java.lang.Enum implements android.support.test.espresso.action.CoordinatesProvider {
    method public static android.support.test.espresso.action.GeneralLocation valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.GeneralLocation[] values();
    enum_constant public static final android.support.test.espresso.action.GeneralLocation BOTTOM_CENTER;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation BOTTOM_LEFT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation BOTTOM_RIGHT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation CENTER;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation CENTER_LEFT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation CENTER_RIGHT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation TOP_CENTER;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation TOP_LEFT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation TOP_RIGHT;
    enum_constant public static final android.support.test.espresso.action.GeneralLocation VISIBLE_CENTER;
  }

  public final class GeneralSwipeAction implements android.support.test.espresso.ViewAction {
    ctor public GeneralSwipeAction(android.support.test.espresso.action.Swiper, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.CoordinatesProvider, android.support.test.espresso.action.PrecisionDescriber);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class KeyEventAction implements android.support.test.espresso.ViewAction {
    ctor public KeyEventAction(android.support.test.espresso.action.EspressoKey);
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class MotionEvents {
    method public static void sendCancel(android.support.test.espresso.UiController, android.view.MotionEvent);
    method public static android.support.test.espresso.action.MotionEvents.DownResultHolder sendDown(android.support.test.espresso.UiController, float[], float[]);
    method public static android.support.test.espresso.action.MotionEvents.DownResultHolder sendDown(android.support.test.espresso.UiController, float[], float[], int, int);
    method public static boolean sendMovement(android.support.test.espresso.UiController, android.view.MotionEvent, float[]);
    method public static boolean sendUp(android.support.test.espresso.UiController, android.view.MotionEvent);
    method public static boolean sendUp(android.support.test.espresso.UiController, android.view.MotionEvent, float[]);
  }

  public static class MotionEvents.DownResultHolder {
    field public final android.view.MotionEvent down;
    field public final boolean longPress;
  }

  public final class OpenLinkAction implements android.support.test.espresso.ViewAction {
    ctor public OpenLinkAction(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<android.net.Uri>);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public abstract interface PrecisionDescriber {
    method public abstract float[] describePrecision();
  }

  public class Press extends java.lang.Enum implements android.support.test.espresso.action.PrecisionDescriber {
    method public static android.support.test.espresso.action.Press valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.Press[] values();
    enum_constant public static final android.support.test.espresso.action.Press FINGER;
    enum_constant public static final android.support.test.espresso.action.Press PINPOINT;
    enum_constant public static final android.support.test.espresso.action.Press THUMB;
  }

  public final class PressBackAction implements android.support.test.espresso.ViewAction {
    ctor public PressBackAction(boolean);
    ctor public PressBackAction(boolean, android.support.test.espresso.action.EspressoKey);
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class RepeatActionUntilViewState implements android.support.test.espresso.ViewAction {
    ctor protected RepeatActionUntilViewState(android.support.test.espresso.ViewAction, org.hamcrest.Matcher<android.view.View>, int);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class ReplaceTextAction implements android.support.test.espresso.ViewAction {
    ctor public ReplaceTextAction(java.lang.String);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class ScrollToAction implements android.support.test.espresso.ViewAction {
    ctor public ScrollToAction();
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public class Swipe extends java.lang.Enum implements android.support.test.espresso.action.Swiper {
    method public static android.support.test.espresso.action.Swipe valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.Swipe[] values();
    enum_constant public static final android.support.test.espresso.action.Swipe FAST;
    enum_constant public static final android.support.test.espresso.action.Swipe SLOW;
  }

  public abstract interface Swiper {
    method public abstract android.support.test.espresso.action.Swiper.Status sendSwipe(android.support.test.espresso.UiController, float[], float[], float[]);
  }

  public static final class Swiper.Status extends java.lang.Enum {
    method public static android.support.test.espresso.action.Swiper.Status valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.Swiper.Status[] values();
    enum_constant public static final android.support.test.espresso.action.Swiper.Status FAILURE;
    enum_constant public static final android.support.test.espresso.action.Swiper.Status SUCCESS;
  }

  public class Tap extends java.lang.Enum implements android.support.test.espresso.action.Tapper {
    method public static android.support.test.espresso.action.Tap valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.Tap[] values();
    enum_constant public static final android.support.test.espresso.action.Tap DOUBLE;
    enum_constant public static final android.support.test.espresso.action.Tap LONG;
    enum_constant public static final android.support.test.espresso.action.Tap SINGLE;
  }

  public abstract interface Tapper {
    method public abstract android.support.test.espresso.action.Tapper.Status sendTap(android.support.test.espresso.UiController, float[], float[], int, int);
    method public abstract deprecated android.support.test.espresso.action.Tapper.Status sendTap(android.support.test.espresso.UiController, float[], float[]);
  }

  public static final class Tapper.Status extends java.lang.Enum {
    method public static android.support.test.espresso.action.Tapper.Status valueOf(java.lang.String);
    method public static final android.support.test.espresso.action.Tapper.Status[] values();
    enum_constant public static final android.support.test.espresso.action.Tapper.Status FAILURE;
    enum_constant public static final android.support.test.espresso.action.Tapper.Status SUCCESS;
    enum_constant public static final android.support.test.espresso.action.Tapper.Status WARNING;
  }

  public final class TypeTextAction implements android.support.test.espresso.ViewAction {
    ctor public TypeTextAction(java.lang.String);
    ctor public TypeTextAction(java.lang.String, boolean);
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public final class ViewActions {
    method public static android.support.test.espresso.ViewAction actionWithAssertions(android.support.test.espresso.ViewAction);
    method public static void addGlobalAssertion(java.lang.String, android.support.test.espresso.ViewAssertion);
    method public static void clearGlobalAssertions();
    method public static android.support.test.espresso.ViewAction clearText();
    method public static android.support.test.espresso.ViewAction click(int, int);
    method public static android.support.test.espresso.ViewAction click();
    method public static android.support.test.espresso.ViewAction click(android.support.test.espresso.ViewAction);
    method public static android.support.test.espresso.ViewAction closeSoftKeyboard();
    method public static android.support.test.espresso.ViewAction doubleClick();
    method public static android.support.test.espresso.ViewAction longClick();
    method public static android.support.test.espresso.ViewAction openLink(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<android.net.Uri>);
    method public static android.support.test.espresso.ViewAction openLinkWithText(java.lang.String);
    method public static android.support.test.espresso.ViewAction openLinkWithText(org.hamcrest.Matcher<java.lang.String>);
    method public static android.support.test.espresso.ViewAction openLinkWithUri(java.lang.String);
    method public static android.support.test.espresso.ViewAction openLinkWithUri(org.hamcrest.Matcher<android.net.Uri>);
    method public static android.support.test.espresso.ViewAction pressBack();
    method public static android.support.test.espresso.ViewAction pressBackUnconditionally();
    method public static android.support.test.espresso.ViewAction pressImeActionButton();
    method public static android.support.test.espresso.ViewAction pressKey(int);
    method public static android.support.test.espresso.ViewAction pressKey(android.support.test.espresso.action.EspressoKey);
    method public static android.support.test.espresso.ViewAction pressMenuKey();
    method public static void removeGlobalAssertion(android.support.test.espresso.ViewAssertion);
    method public static android.support.test.espresso.ViewAction repeatedlyUntil(android.support.test.espresso.ViewAction, org.hamcrest.Matcher<android.view.View>, int);
    method public static android.support.test.espresso.ViewAction replaceText(java.lang.String);
    method public static android.support.test.espresso.ViewAction scrollTo();
    method public static android.support.test.espresso.ViewAction swipeDown();
    method public static android.support.test.espresso.ViewAction swipeLeft();
    method public static android.support.test.espresso.ViewAction swipeRight();
    method public static android.support.test.espresso.ViewAction swipeUp();
    method public static android.support.test.espresso.ViewAction typeText(java.lang.String);
    method public static android.support.test.espresso.ViewAction typeTextIntoFocusedView(java.lang.String);
  }

}

package android.support.test.espresso.assertion {

  public final class LayoutAssertions {
    method public static android.support.test.espresso.ViewAssertion noEllipsizedText();
    method public static android.support.test.espresso.ViewAssertion noMultilineButtons();
    method public static android.support.test.espresso.ViewAssertion noOverlaps(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion noOverlaps();
  }

  public final class PositionAssertions {
    method public static deprecated android.support.test.espresso.ViewAssertion isAbove(org.hamcrest.Matcher<android.view.View>);
    method public static deprecated android.support.test.espresso.ViewAssertion isBelow(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isBottomAlignedWith(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isCompletelyAbove(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isCompletelyBelow(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isCompletelyLeftOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isCompletelyRightOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isLeftAlignedWith(org.hamcrest.Matcher<android.view.View>);
    method public static deprecated android.support.test.espresso.ViewAssertion isLeftOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isPartiallyAbove(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isPartiallyBelow(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isPartiallyLeftOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isPartiallyRightOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isRightAlignedWith(org.hamcrest.Matcher<android.view.View>);
    method public static deprecated android.support.test.espresso.ViewAssertion isRightOf(org.hamcrest.Matcher<android.view.View>);
    method public static android.support.test.espresso.ViewAssertion isTopAlignedWith(org.hamcrest.Matcher<android.view.View>);
  }

  public final class ViewAssertions {
    method public static android.support.test.espresso.ViewAssertion doesNotExist();
    method public static android.support.test.espresso.ViewAssertion matches(org.hamcrest.Matcher<? super android.view.View>);
    method public static android.support.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher<android.view.View>, org.hamcrest.Matcher<android.view.View>);
  }

}

package android.support.test.espresso.base {

  public abstract interface ActiveRootLister {
    method public abstract java.util.List<android.support.test.espresso.Root> listActiveRoots();
  }

  public abstract class Default implements java.lang.annotation.Annotation {
  }

  public final class DefaultFailureHandler implements android.support.test.espresso.FailureHandler {
    ctor public DefaultFailureHandler(android.content.Context);
    method public void handle(java.lang.Throwable, org.hamcrest.Matcher<android.view.View>);
  }

  public final class IdlingResourceRegistry {
    ctor public IdlingResourceRegistry(android.os.Looper);
    method public java.util.List<android.support.test.espresso.IdlingResource> getResources();
    method public void registerLooper(android.os.Looper, boolean);
    method public boolean registerResources(java.util.List<? extends android.support.test.espresso.IdlingResource>);
    method public void sync(java.lang.Iterable<android.support.test.espresso.IdlingResource>, java.lang.Iterable<android.os.Looper>);
    method public boolean unregisterResources(java.util.List<? extends android.support.test.espresso.IdlingResource>);
  }

  public abstract interface IdlingUiController implements android.support.test.espresso.UiController {
    method public abstract android.support.test.espresso.base.IdlingResourceRegistry getIdlingResourceRegistry();
  }

  public abstract interface InterruptableUiController implements android.support.test.espresso.UiController {
    method public abstract void interruptEspressoTasks();
  }

  public abstract class MainThread implements java.lang.annotation.Annotation {
  }

  public final class RootViewPicker implements javax.inject.Provider {
    method public android.view.View get();
  }

  public abstract class RootViewPickerScope implements java.lang.annotation.Annotation {
  }

  public final class ViewFinderImpl implements android.support.test.espresso.ViewFinder {
    method public android.view.View getView() throws android.support.test.espresso.AmbiguousViewMatcherException, android.support.test.espresso.NoMatchingViewException;
  }

}

package android.support.test.espresso.contrib {

  public final deprecated class AccessibilityChecks {
    method public static android.support.test.espresso.ViewAssertion accessibilityAssertion();
    method public static com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator enable();
  }

  public final class ActivityResultMatchers {
    method public static org.hamcrest.Matcher<? super android.app.Instrumentation.ActivityResult> hasResultCode(int);
    method public static org.hamcrest.Matcher<? super android.app.Instrumentation.ActivityResult> hasResultData(org.hamcrest.Matcher<android.content.Intent>);
  }

  public final class DrawerActions {
    method public static android.support.test.espresso.ViewAction close();
    method public static android.support.test.espresso.ViewAction close(int);
    method public static deprecated void closeDrawer(int);
    method public static deprecated void closeDrawer(int, int);
    method public static android.support.test.espresso.ViewAction open();
    method public static android.support.test.espresso.ViewAction open(int);
    method public static deprecated void openDrawer(int);
    method public static deprecated void openDrawer(int, int);
  }

  public final class DrawerMatchers {
    method public static org.hamcrest.Matcher<android.view.View> isClosed(int);
    method public static org.hamcrest.Matcher<android.view.View> isClosed();
    method public static org.hamcrest.Matcher<android.view.View> isOpen(int);
    method public static org.hamcrest.Matcher<android.view.View> isOpen();
  }

  public final class NavigationViewActions {
    method public static android.support.test.espresso.ViewAction navigateTo(int);
  }

  public final class PickerActions {
    method public static android.support.test.espresso.ViewAction setDate(int, int, int);
    method public static android.support.test.espresso.ViewAction setTime(int, int);
  }

  public final class RecyclerViewActions {
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.contrib.RecyclerViewActions.PositionableRecyclerViewAction actionOnHolderItem(org.hamcrest.Matcher<VH>, android.support.test.espresso.ViewAction);
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.contrib.RecyclerViewActions.PositionableRecyclerViewAction actionOnItem(org.hamcrest.Matcher<android.view.View>, android.support.test.espresso.ViewAction);
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.ViewAction actionOnItemAtPosition(int, android.support.test.espresso.ViewAction);
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.contrib.RecyclerViewActions.PositionableRecyclerViewAction scrollTo(org.hamcrest.Matcher<android.view.View>);
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.contrib.RecyclerViewActions.PositionableRecyclerViewAction scrollToHolder(org.hamcrest.Matcher<VH>);
    method public static <VH extends android.support.v7.widget.RecyclerView.ViewHolder> android.support.test.espresso.ViewAction scrollToPosition(int);
  }

  public static abstract interface RecyclerViewActions.PositionableRecyclerViewAction implements android.support.test.espresso.ViewAction {
    method public abstract android.support.test.espresso.contrib.RecyclerViewActions.PositionableRecyclerViewAction atPosition(int);
  }

  public final class ViewPagerActions {
    method public static android.support.test.espresso.ViewAction clickBetweenTwoTitles(java.lang.String, java.lang.String);
    method public static android.support.test.espresso.ViewAction scrollLeft();
    method public static android.support.test.espresso.ViewAction scrollLeft(boolean);
    method public static android.support.test.espresso.ViewAction scrollRight();
    method public static android.support.test.espresso.ViewAction scrollRight(boolean);
    method public static android.support.test.espresso.ViewAction scrollToFirst();
    method public static android.support.test.espresso.ViewAction scrollToFirst(boolean);
    method public static android.support.test.espresso.ViewAction scrollToLast();
    method public static android.support.test.espresso.ViewAction scrollToLast(boolean);
    method public static android.support.test.espresso.ViewAction scrollToPage(int);
    method public static android.support.test.espresso.ViewAction scrollToPage(int, boolean);
  }

}

package android.support.test.espresso.idling {

  public final class CountingIdlingResource implements android.support.test.espresso.IdlingResource {
    ctor public CountingIdlingResource(java.lang.String);
    ctor public CountingIdlingResource(java.lang.String, boolean);
    method public void decrement();
    method public void dumpStateToLogs();
    method public java.lang.String getName();
    method public void increment();
    method public boolean isIdleNow();
    method public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource.ResourceCallback);
  }

}

package android.support.test.espresso.idling.concurrent {

  public class IdlingScheduledThreadPoolExecutor extends java.util.concurrent.ScheduledThreadPoolExecutor implements android.support.test.espresso.IdlingResource {
    ctor public IdlingScheduledThreadPoolExecutor(java.lang.String, int, java.util.concurrent.ThreadFactory);
    method public java.lang.String getName();
    method public boolean isIdleNow();
    method public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource.ResourceCallback);
  }

  public class IdlingThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements android.support.test.espresso.IdlingResource {
    ctor public IdlingThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory);
    method public synchronized void execute(java.lang.Runnable);
    method public java.lang.String getName();
    method public boolean isIdleNow();
    method public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource.ResourceCallback);
  }

}

package android.support.test.espresso.idling.net {

  public class UriIdlingResource implements android.support.test.espresso.IdlingResource {
    ctor public UriIdlingResource(java.lang.String, long);
    method public void beginLoad(java.lang.String);
    method public void endLoad(java.lang.String);
    method public java.lang.String getName();
    method public void ignoreUri(java.util.regex.Pattern);
    method public boolean isIdleNow();
    method public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource.ResourceCallback);
  }

  public static abstract interface UriIdlingResource.HandlerIntf {
    method public abstract void postDelayed(java.lang.Runnable, long);
    method public abstract void removeCallbacks(java.lang.Runnable);
  }

}

package android.support.test.espresso.intent {

  public abstract interface ActivityResultFunction {
    method public abstract android.app.Instrumentation.ActivityResult apply(android.content.Intent);
  }

  public final class Checks {
    method public static void checkArgument(boolean);
    method public static void checkArgument(boolean, java.lang.Object);
    method public static void checkArgument(boolean, java.lang.String, java.lang.Object...);
    method public static <T> T checkNotNull(T);
    method public static <T> T checkNotNull(T, java.lang.Object);
    method public static <T> T checkNotNull(T, java.lang.String, java.lang.Object...);
    method public static void checkState(boolean, java.lang.Object);
    method public static void checkState(boolean, java.lang.String, java.lang.Object...);
  }

  public final class Intents {
    method public static void assertNoUnverifiedIntents();
    method public static void init();
    method public static void intended(org.hamcrest.Matcher<android.content.Intent>);
    method public static void intended(org.hamcrest.Matcher<android.content.Intent>, android.support.test.espresso.intent.VerificationMode);
    method public static android.support.test.espresso.intent.OngoingStubbing intending(org.hamcrest.Matcher<android.content.Intent>);
    method public static void release();
    method public static android.support.test.espresso.intent.VerificationMode times(int);
  }

  public final class OngoingStubbing {
    method public void respondWith(android.app.Instrumentation.ActivityResult);
    method public void respondWithFunction(android.support.test.espresso.intent.ActivityResultFunction);
  }

  public abstract interface ResettingStubber implements android.support.test.runner.intent.IntentStubber {
    method public abstract void initialize();
    method public abstract boolean isInitialized();
    method public abstract void reset();
    method public abstract void setActivityResultForIntent(org.hamcrest.Matcher<android.content.Intent>, android.app.Instrumentation.ActivityResult);
    method public abstract void setActivityResultFunctionForIntent(org.hamcrest.Matcher<android.content.Intent>, android.support.test.espresso.intent.ActivityResultFunction);
  }

  public final class ResettingStubberImpl implements android.support.test.espresso.intent.ResettingStubber {
    ctor public ResettingStubberImpl();
    method public android.app.Instrumentation.ActivityResult getActivityResultForIntent(android.content.Intent);
    method public void initialize();
    method public boolean isInitialized();
    method public void reset();
    method public void setActivityResultForIntent(org.hamcrest.Matcher<android.content.Intent>, android.app.Instrumentation.ActivityResult);
    method public void setActivityResultFunctionForIntent(org.hamcrest.Matcher<android.content.Intent>, android.support.test.espresso.intent.ActivityResultFunction);
  }

  public abstract interface ResolvedIntent {
    method public abstract boolean canBeHandledBy(java.lang.String);
    method public abstract android.content.Intent getIntent();
  }

  public abstract interface VerifiableIntent implements android.support.test.espresso.intent.ResolvedIntent {
    method public abstract boolean hasBeenVerified();
    method public abstract void markAsVerified();
  }

  public abstract interface VerificationMode {
    method public abstract void verify(org.hamcrest.Matcher<android.content.Intent>, java.util.List<android.support.test.espresso.intent.VerifiableIntent>);
  }

  public final class VerificationModes {
    method public static android.support.test.espresso.intent.VerificationMode noUnverifiedIntents();
    method public static android.support.test.espresso.intent.VerificationMode times(int);
  }

}

package android.support.test.espresso.intent.matcher {

  public final class BundleMatchers {
    method public static <T> org.hamcrest.Matcher<android.os.Bundle> hasEntry(java.lang.String, T);
    method public static org.hamcrest.Matcher<android.os.Bundle> hasEntry(java.lang.String, org.hamcrest.Matcher<?>);
    method public static org.hamcrest.Matcher<android.os.Bundle> hasEntry(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<?>);
    method public static org.hamcrest.Matcher<android.os.Bundle> hasKey(java.lang.String);
    method public static org.hamcrest.Matcher<android.os.Bundle> hasKey(org.hamcrest.Matcher<java.lang.String>);
    method public static <T> org.hamcrest.Matcher<android.os.Bundle> hasValue(T);
    method public static org.hamcrest.Matcher<android.os.Bundle> hasValue(org.hamcrest.Matcher<?>);
  }

  public final class ComponentNameMatchers {
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasClassName(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasClassName(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasMyPackageName();
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasPackageName(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasPackageName(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasShortClassName(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.ComponentName> hasShortClassName(org.hamcrest.Matcher<java.lang.String>);
  }

  public final class IntentMatchers {
    method public static org.hamcrest.Matcher<android.content.Intent> anyIntent();
    method public static org.hamcrest.Matcher<android.content.Intent> hasAction(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasAction(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasCategories(java.util.Set<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasCategories(org.hamcrest.Matcher<? extends java.lang.Iterable<? super java.lang.String>>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasComponent(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasComponent(android.content.ComponentName);
    method public static org.hamcrest.Matcher<android.content.Intent> hasComponent(org.hamcrest.Matcher<android.content.ComponentName>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasData(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasData(android.net.Uri);
    method public static org.hamcrest.Matcher<android.content.Intent> hasData(org.hamcrest.Matcher<android.net.Uri>);
    method public static <T> org.hamcrest.Matcher<android.content.Intent> hasExtra(java.lang.String, T);
    method public static org.hamcrest.Matcher<android.content.Intent> hasExtra(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<?>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasExtraWithKey(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasExtraWithKey(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasExtras(org.hamcrest.Matcher<android.os.Bundle>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasFlag(int);
    method public static org.hamcrest.Matcher<android.content.Intent> hasFlags(int...);
    method public static org.hamcrest.Matcher<android.content.Intent> hasFlags(int);
    method public static org.hamcrest.Matcher<android.content.Intent> hasPackage(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.Intent> hasPackage(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasType(java.lang.String);
    method public static org.hamcrest.Matcher<android.content.Intent> hasType(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.content.Intent> isInternal();
    method public static org.hamcrest.Matcher<android.content.Intent> toPackage(java.lang.String);
  }

  public final class UriMatchers {
    method public static org.hamcrest.Matcher<android.net.Uri> hasHost(java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasHost(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.net.Uri> hasParamWithName(java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasParamWithName(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.net.Uri> hasParamWithValue(java.lang.String, java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasParamWithValue(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.net.Uri> hasPath(java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasPath(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.net.Uri> hasScheme(java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasScheme(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.net.Uri> hasSchemeSpecificPart(java.lang.String, java.lang.String);
    method public static org.hamcrest.Matcher<android.net.Uri> hasSchemeSpecificPart(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.String>);
  }

}

package android.support.test.espresso.intent.rule {

  public class IntentsTestRule<T extends android.app.Activity> extends android.support.test.rule.ActivityTestRule {
    ctor public IntentsTestRule(java.lang.Class<T>);
    ctor public IntentsTestRule(java.lang.Class<T>, boolean);
    ctor public IntentsTestRule(java.lang.Class<T>, boolean, boolean);
  }

}

package android.support.test.espresso.matcher {

  public abstract class BoundedMatcher<T, S extends T> extends org.hamcrest.BaseMatcher {
    ctor public BoundedMatcher(java.lang.Class<? extends S>);
    ctor public BoundedMatcher(java.lang.Class<?>, java.lang.Class<?>, java.lang.Class<?>...);
    method public final boolean matches(java.lang.Object);
    method protected abstract boolean matchesSafely(S);
  }

  public final class CursorMatchers {
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowBlob(int, byte[]);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowBlob(int, org.hamcrest.Matcher<byte[]>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowBlob(java.lang.String, byte[]);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowBlob(java.lang.String, org.hamcrest.Matcher<byte[]>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowBlob(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<byte[]>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowDouble(int, double);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowDouble(int, org.hamcrest.Matcher<java.lang.Double>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowDouble(java.lang.String, double);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowDouble(java.lang.String, org.hamcrest.Matcher<java.lang.Double>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowDouble(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.Double>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowFloat(int, float);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowFloat(int, org.hamcrest.Matcher<java.lang.Float>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowFloat(java.lang.String, float);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowFloat(java.lang.String, org.hamcrest.Matcher<java.lang.Float>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowFloat(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.Float>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowInt(int, int);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowInt(int, org.hamcrest.Matcher<java.lang.Integer>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowInt(java.lang.String, int);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowInt(java.lang.String, org.hamcrest.Matcher<java.lang.Integer>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowInt(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.Integer>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowLong(int, long);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowLong(int, org.hamcrest.Matcher<java.lang.Long>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowLong(java.lang.String, long);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowLong(java.lang.String, org.hamcrest.Matcher<java.lang.Long>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowLong(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.Long>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowShort(int, short);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowShort(int, org.hamcrest.Matcher<java.lang.Short>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowShort(java.lang.String, short);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowShort(java.lang.String, org.hamcrest.Matcher<java.lang.Short>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowShort(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.Short>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowString(int, java.lang.String);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowString(int, org.hamcrest.Matcher<java.lang.String>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowString(java.lang.String, java.lang.String);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowString(java.lang.String, org.hamcrest.Matcher<java.lang.String>);
    method public static android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withRowString(org.hamcrest.Matcher<java.lang.String>, org.hamcrest.Matcher<java.lang.String>);
  }

  public static class CursorMatchers.CursorMatcher extends android.support.test.espresso.matcher.BoundedMatcher {
    method public void describeTo(org.hamcrest.Description);
    method public boolean matchesSafely(android.database.Cursor);
    method public android.support.test.espresso.matcher.CursorMatchers.CursorMatcher withStrictColumnChecks(boolean);
  }

  public final class HasBackgroundMatcher extends org.hamcrest.TypeSafeMatcher {
    ctor public HasBackgroundMatcher(int);
    method public void describeTo(org.hamcrest.Description);
    method protected boolean matchesSafely(android.view.View);
  }

  public final class LayoutMatchers {
    method public static org.hamcrest.Matcher<android.view.View> hasEllipsizedText();
    method public static org.hamcrest.Matcher<android.view.View> hasMultilineText();
  }

  public final class PreferenceMatchers {
    method public static org.hamcrest.Matcher<android.preference.Preference> isEnabled();
    method public static org.hamcrest.Matcher<android.preference.Preference> withKey(java.lang.String);
    method public static org.hamcrest.Matcher<android.preference.Preference> withKey(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.preference.Preference> withSummary(int);
    method public static org.hamcrest.Matcher<android.preference.Preference> withSummaryText(java.lang.String);
    method public static org.hamcrest.Matcher<android.preference.Preference> withSummaryText(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.preference.Preference> withTitle(int);
    method public static org.hamcrest.Matcher<android.preference.Preference> withTitleText(java.lang.String);
    method public static org.hamcrest.Matcher<android.preference.Preference> withTitleText(org.hamcrest.Matcher<java.lang.String>);
  }

  public final class RootMatchers {
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> hasWindowLayoutParams();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> isDialog();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> isFocusable();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> isPlatformPopup();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> isSystemAlertWindow();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> isTouchable();
    method public static org.hamcrest.Matcher<android.support.test.espresso.Root> withDecorView(org.hamcrest.Matcher<android.view.View>);
    field public static final org.hamcrest.Matcher<android.support.test.espresso.Root> DEFAULT;
  }

  public final class ViewMatchers {
    method public static <T> void assertThat(T, org.hamcrest.Matcher<T>);
    method public static <T> void assertThat(java.lang.String, T, org.hamcrest.Matcher<T>);
    method public static org.hamcrest.Matcher<android.view.View> hasBackground(int);
    method public static org.hamcrest.Matcher<android.view.View> hasChildCount(int);
    method public static org.hamcrest.Matcher<android.view.View> hasContentDescription();
    method public static org.hamcrest.Matcher<android.view.View> hasDescendant(org.hamcrest.Matcher<android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> hasErrorText(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> hasErrorText(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> hasFocus();
    method public static org.hamcrest.Matcher<android.view.View> hasImeAction(int);
    method public static org.hamcrest.Matcher<android.view.View> hasImeAction(org.hamcrest.Matcher<java.lang.Integer>);
    method public static org.hamcrest.Matcher<android.view.View> hasLinks();
    method public static org.hamcrest.Matcher<android.view.View> hasMinimumChildCount(int);
    method public static org.hamcrest.Matcher<android.view.View> hasSibling(org.hamcrest.Matcher<android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> hasTextColor(int);
    method public static org.hamcrest.Matcher<android.view.View> isAssignableFrom(java.lang.Class<? extends android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> isChecked();
    method public static org.hamcrest.Matcher<android.view.View> isClickable();
    method public static org.hamcrest.Matcher<android.view.View> isCompletelyDisplayed();
    method public static org.hamcrest.Matcher<android.view.View> isDescendantOfA(org.hamcrest.Matcher<android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> isDisplayed();
    method public static org.hamcrest.Matcher<android.view.View> isDisplayingAtLeast(int);
    method public static org.hamcrest.Matcher<android.view.View> isEnabled();
    method public static org.hamcrest.Matcher<android.view.View> isFocusable();
    method public static org.hamcrest.Matcher<android.view.View> isJavascriptEnabled();
    method public static org.hamcrest.Matcher<android.view.View> isNotChecked();
    method public static org.hamcrest.Matcher<android.view.View> isRoot();
    method public static org.hamcrest.Matcher<android.view.View> isSelected();
    method public static org.hamcrest.Matcher<android.view.View> supportsInputMethods();
    method public static org.hamcrest.Matcher<android.view.View> withAlpha(float);
    method public static org.hamcrest.Matcher<android.view.View> withChild(org.hamcrest.Matcher<android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> withClassName(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> withContentDescription(int);
    method public static org.hamcrest.Matcher<android.view.View> withContentDescription(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withContentDescription(org.hamcrest.Matcher<? extends java.lang.CharSequence>);
    method public static org.hamcrest.Matcher<android.view.View> withEffectiveVisibility(android.support.test.espresso.matcher.ViewMatchers.Visibility);
    method public static org.hamcrest.Matcher<android.view.View> withHint(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withHint(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> withHint(int);
    method public static org.hamcrest.Matcher<android.view.View> withId(int);
    method public static org.hamcrest.Matcher<android.view.View> withId(org.hamcrest.Matcher<java.lang.Integer>);
    method public static org.hamcrest.Matcher<android.view.View> withInputType(int);
    method public static org.hamcrest.Matcher<android.view.View> withParent(org.hamcrest.Matcher<android.view.View>);
    method public static org.hamcrest.Matcher<android.view.View> withParentIndex(int);
    method public static org.hamcrest.Matcher<android.view.View> withResourceName(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withResourceName(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> withSpinnerText(int);
    method public static org.hamcrest.Matcher<android.view.View> withSpinnerText(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> withSpinnerText(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withSubstring(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withTagKey(int);
    method public static org.hamcrest.Matcher<android.view.View> withTagKey(int, org.hamcrest.Matcher<java.lang.Object>);
    method public static org.hamcrest.Matcher<android.view.View> withTagValue(org.hamcrest.Matcher<java.lang.Object>);
    method public static org.hamcrest.Matcher<android.view.View> withText(java.lang.String);
    method public static org.hamcrest.Matcher<android.view.View> withText(org.hamcrest.Matcher<java.lang.String>);
    method public static org.hamcrest.Matcher<android.view.View> withText(int);
  }

  public static final class ViewMatchers.Visibility extends java.lang.Enum {
    method public int getValue();
    method public static android.support.test.espresso.matcher.ViewMatchers.Visibility valueOf(java.lang.String);
    method public static final android.support.test.espresso.matcher.ViewMatchers.Visibility[] values();
    enum_constant public static final android.support.test.espresso.matcher.ViewMatchers.Visibility GONE;
    enum_constant public static final android.support.test.espresso.matcher.ViewMatchers.Visibility INVISIBLE;
    enum_constant public static final android.support.test.espresso.matcher.ViewMatchers.Visibility VISIBLE;
  }

}

package android.support.test.espresso.remote {

  public abstract interface Bindable {
    method public abstract android.os.IBinder getIBinder();
    method public abstract java.lang.String getId();
    method public abstract void setIBinder(android.os.IBinder);
  }

  public final class ConstructorInvocation {
    ctor public ConstructorInvocation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<?>...);
    method public java.lang.Object invokeConstructor(java.lang.Object...);
  }

  public abstract interface Converter<I, O> {
    method public abstract O convert(I);
  }

  public final class EspressoRemote implements android.support.test.espresso.remote.RemoteInteraction {
    method public synchronized java.util.concurrent.Callable<java.lang.Void> createRemoteCheckCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAssertion);
    method public synchronized java.util.concurrent.Callable<java.lang.Void> createRemotePerformCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAction...);
    method public static android.support.test.espresso.remote.EspressoRemote getInstance();
    method public synchronized void init();
    method public synchronized boolean isRemoteProcess();
    method public synchronized void terminate();
  }

  public abstract interface EspressoRemoteMessage {
  }

  public static abstract interface EspressoRemoteMessage.From<T, M> {
    method public abstract T fromProto(M);
  }

  public static abstract interface EspressoRemoteMessage.To<M> {
    method public abstract M toProto();
  }

  public final class FieldDescriptor {
    method public static android.support.test.espresso.remote.FieldDescriptor of(java.lang.Class<?>, java.lang.String, int);
    field public final java.lang.String fieldName;
    field public final java.lang.Class<?> fieldType;
    field public final int order;
  }

  public final class GenericRemoteMessage implements android.support.test.espresso.remote.EspressoRemoteMessage.To {
    ctor public GenericRemoteMessage(java.lang.Object);
    method public com.google.protobuf.MessageLite toProto();
    field public static final android.support.test.espresso.remote.EspressoRemoteMessage.From<java.lang.Object, com.google.protobuf.MessageLite> FROM;
  }

  public final class InteractionRequest implements android.support.test.espresso.remote.EspressoRemoteMessage.To {
    method public org.hamcrest.Matcher<android.support.test.espresso.Root> getRootMatcher();
    method public android.support.test.espresso.ViewAction getViewAction();
    method public android.support.test.espresso.ViewAssertion getViewAssertion();
    method public org.hamcrest.Matcher<android.view.View> getViewMatcher();
    method public com.google.protobuf.MessageLite toProto();
  }

  public static class InteractionRequest.Builder {
    ctor public InteractionRequest.Builder();
    method public android.support.test.espresso.remote.InteractionRequest build();
    method public android.support.test.espresso.remote.InteractionRequest.Builder setRequestProto(byte[]);
    method public android.support.test.espresso.remote.InteractionRequest.Builder setRootMatcher(org.hamcrest.Matcher<android.support.test.espresso.Root>);
    method public android.support.test.espresso.remote.InteractionRequest.Builder setViewAction(android.support.test.espresso.ViewAction);
    method public android.support.test.espresso.remote.InteractionRequest.Builder setViewAssertion(android.support.test.espresso.ViewAssertion);
    method public android.support.test.espresso.remote.InteractionRequest.Builder setViewMatcher(org.hamcrest.Matcher<android.view.View>);
  }

  public final class InteractionResponse implements android.support.test.espresso.remote.EspressoRemoteMessage.To {
    method public android.support.test.espresso.remote.InteractionResponse.RemoteError getRemoteError();
    method public android.support.test.espresso.remote.InteractionResponse.Status getStatus();
    method public boolean hasRemoteError();
    method public com.google.protobuf.MessageLite toProto();
  }

  public static class InteractionResponse.Builder {
    ctor public InteractionResponse.Builder();
    method public android.support.test.espresso.remote.InteractionResponse build();
    method public android.support.test.espresso.remote.InteractionResponse.Builder setRemoteError(android.support.test.espresso.remote.InteractionResponse.RemoteError);
    method public android.support.test.espresso.remote.InteractionResponse.Builder setResultProto(byte[]);
    method public android.support.test.espresso.remote.InteractionResponse.Builder setStatus(android.support.test.espresso.remote.InteractionResponse.Status);
  }

  public static final class InteractionResponse.RemoteError {
    method public int getCode();
    method public java.lang.String getDescription();
    field public static final int REMOTE_ESPRESSO_ERROR_CODE = 0; // 0x0
    field public static final int REMOTE_PROTOCOL_ERROR_CODE = 1; // 0x1
  }

  public static final class InteractionResponse.Status extends java.lang.Enum {
    method public static android.support.test.espresso.remote.InteractionResponse.Status valueOf(java.lang.String);
    method public static final android.support.test.espresso.remote.InteractionResponse.Status[] values();
    enum_constant public static final android.support.test.espresso.remote.InteractionResponse.Status Error;
    enum_constant public static final android.support.test.espresso.remote.InteractionResponse.Status Ok;
  }

  public final class NoRemoteEspressoInstanceException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public NoRemoteEspressoInstanceException(java.lang.String);
  }

  public class NoopRemoteInteraction implements android.support.test.espresso.remote.RemoteInteraction {
    ctor public NoopRemoteInteraction();
    method public java.util.concurrent.Callable<java.lang.Void> createRemoteCheckCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAssertion);
    method public java.util.concurrent.Callable<java.lang.Void> createRemotePerformCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAction...);
    method public boolean isRemoteProcess();
  }

  public final class ProtoUtils {
    method public static java.lang.String capitalizeFirstChar(java.lang.String);
    method public static <T extends java.lang.Enum> T checkedGetEnumForProto(int, java.lang.Class<T>);
    method public static java.util.List<java.lang.reflect.Field> getFilteredFieldList(java.lang.Class<?>, java.util.List<java.lang.String>) throws java.lang.NoSuchFieldException;
  }

  public final class RemoteDescriptor {
    method public java.util.List<android.support.test.espresso.remote.FieldDescriptor> getInstanceFieldDescriptorList();
    method public java.lang.Class<?> getInstanceType();
    method public java.lang.String getInstanceTypeName();
    method public java.lang.Class<?> getProtoBuilderClass();
    method public com.google.protobuf.Parser<?> getProtoParser();
    method public java.lang.Class<?> getProtoType();
    method public java.lang.Class<?>[] getRemoteConstrTypes();
    method public java.lang.Class<?> getRemoteType();
  }

  public static final class RemoteDescriptor.Builder {
    ctor public RemoteDescriptor.Builder();
    method public android.support.test.espresso.remote.RemoteDescriptor build();
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setInstanceFieldDescriptors(android.support.test.espresso.remote.FieldDescriptor...);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setInstanceType(java.lang.Class<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setProtoBuilderType(java.lang.Class<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setProtoParser(com.google.protobuf.Parser<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setProtoType(java.lang.Class<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setRemoteConstrTypes(java.lang.Class<?>...);
    method public android.support.test.espresso.remote.RemoteDescriptor.Builder setRemoteType(java.lang.Class<?>);
  }

  public final class RemoteDescriptorRegistry {
    method public android.support.test.espresso.remote.RemoteDescriptor argForInstanceType(java.lang.Class<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor argForMsgType(java.lang.Class<?>);
    method public android.support.test.espresso.remote.RemoteDescriptor argForRemoteTypeUrl(java.lang.String);
    method public static android.support.test.espresso.remote.RemoteDescriptorRegistry getInstance();
    method public boolean hasArgForInstanceType(java.lang.Class<?>);
    method public boolean registerRemoteTypeArgs(java.util.List<android.support.test.espresso.remote.RemoteDescriptor>);
    method public void unregisterRemoteTypeArgs(java.util.List<android.support.test.espresso.remote.RemoteDescriptor>);
  }

  public class RemoteEspressoException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public RemoteEspressoException(java.lang.String);
    ctor public RemoteEspressoException(java.lang.String, java.lang.Throwable);
  }

  public abstract interface RemoteInteraction {
    method public abstract java.util.concurrent.Callable<java.lang.Void> createRemoteCheckCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAssertion);
    method public abstract java.util.concurrent.Callable<java.lang.Void> createRemotePerformCallable(org.hamcrest.Matcher<android.support.test.espresso.Root>, org.hamcrest.Matcher<android.view.View>, java.util.Map<java.lang.String, android.os.IBinder>, android.support.test.espresso.ViewAction...);
    method public abstract boolean isRemoteProcess();
    field public static final java.lang.String BUNDLE_EXECUTION_STATUS = "executionStatus";
  }

  public class RemoteInteractionRegistry {
    method public static android.support.test.espresso.remote.RemoteInteraction getInstance();
    method public static void registerInstance(android.support.test.espresso.remote.RemoteInteraction);
  }

  public class RemoteProtocolException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public RemoteProtocolException(java.lang.String);
    ctor public RemoteProtocolException(java.lang.String, java.lang.Throwable);
  }

  public final class TypeProtoConverters {
    method public static <T> T anyToType(com.google.protobuf.Any);
    method public static android.os.Parcelable byteStringToParcelable(com.google.protobuf.ByteString, java.lang.Class<android.os.Parcelable>);
    method public static <T> T byteStringToType(com.google.protobuf.ByteString);
    method public static com.google.protobuf.ByteString parcelableToByteString(android.os.Parcelable);
    method public static <T> com.google.protobuf.Any typeToAny(T);
    method public static com.google.protobuf.ByteString typeToByteString(java.lang.Object);
  }

}

package android.support.test.espresso.util {

  public final class ActivityLifecycles {
    method public static boolean hasForegroundActivities(android.support.test.runner.lifecycle.ActivityLifecycleMonitor);
    method public static boolean hasTransitioningActivities(android.support.test.runner.lifecycle.ActivityLifecycleMonitor);
    method public static boolean hasVisibleActivities(android.support.test.runner.lifecycle.ActivityLifecycleMonitor);
  }

  public final class EspressoOptional<T> {
    method public static <T> android.support.test.espresso.util.EspressoOptional<T> absent();
    method public java.util.Set<T> asSet();
    method public static <T> android.support.test.espresso.util.EspressoOptional<T> fromNullable(T);
    method public T get();
    method public boolean isPresent();
    method public static <T> android.support.test.espresso.util.EspressoOptional<T> of(T);
    method public com.google.common.base.Optional<T> or(com.google.common.base.Optional<? extends T>);
    method public T or(com.google.common.base.Supplier<? extends T>);
    method public T or(T);
    method public T orNull();
    method public static <T> java.lang.Iterable<T> presentInstances(java.lang.Iterable<? extends com.google.common.base.Optional<? extends T>>);
    method public <V> com.google.common.base.Optional<V> transform(com.google.common.base.Function<? super T, V>);
  }

  public final class HumanReadables {
    method public static java.lang.String describe(android.database.Cursor);
    method public static java.lang.String describe(android.view.View);
    method public static java.lang.String getViewHierarchyErrorMessage(android.view.View, java.util.List<android.view.View>, java.lang.String, java.lang.String);
  }

  public final class TreeIterables {
    method public static java.lang.Iterable<android.view.View> breadthFirstViewTraversal(android.view.View);
    method public static java.lang.Iterable<android.view.View> depthFirstViewTraversal(android.view.View);
    method public static java.lang.Iterable<android.support.test.espresso.util.TreeIterables.ViewAndDistance> depthFirstViewTraversalWithDistance(android.view.View);
  }

  public static class TreeIterables.ViewAndDistance {
    method public int getDistanceFromRoot();
    method public android.view.View getView();
  }

}

package android.support.test.espresso.web.action {

  public final class AtomAction<E> implements android.support.test.espresso.remote.Bindable android.support.test.espresso.ViewAction {
    ctor public AtomAction(android.support.test.espresso.web.model.Atom<E>, android.support.test.espresso.web.model.WindowReference, android.support.test.espresso.web.model.ElementReference);
    method public E get() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException;
    method public E get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.lang.InterruptedException, java.util.concurrent.TimeoutException;
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public java.util.concurrent.Future<E> getFuture();
    method public android.os.IBinder getIBinder();
    method public java.lang.String getId();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
    method public void setIBinder(android.os.IBinder);
  }

  public class EnableJavascriptAction implements android.support.test.espresso.ViewAction {
    ctor public EnableJavascriptAction();
    method public org.hamcrest.Matcher<android.view.View> getConstraints();
    method public java.lang.String getDescription();
    method public void perform(android.support.test.espresso.UiController, android.view.View);
  }

  public abstract interface IAtomActionResultPropagator implements android.os.IInterface {
    method public abstract void setError(android.os.Bundle) throws android.os.RemoteException;
    method public abstract void setResult(android.support.test.espresso.web.model.Evaluation) throws android.os.RemoteException;
  }

  public static abstract class IAtomActionResultPropagator.Stub extends com.google.android.aidl.BaseStub implements android.support.test.espresso.web.action.IAtomActionResultPropagator {
    ctor public IAtomActionResultPropagator.Stub();
    method public static android.support.test.espresso.web.action.IAtomActionResultPropagator asInterface(android.os.IBinder);
  }

  public static class IAtomActionResultPropagator.Stub.Proxy extends com.google.android.aidl.BaseProxy implements android.support.test.espresso.web.action.IAtomActionResultPropagator {
    method public void setError(android.os.Bundle) throws android.os.RemoteException;
    method public void setResult(android.support.test.espresso.web.model.Evaluation) throws android.os.RemoteException;
  }

}

package android.support.test.espresso.web.assertion {

  public final class TagSoupDocumentParser {
    method public static android.support.test.espresso.web.assertion.TagSoupDocumentParser newInstance() throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
    method public org.w3c.dom.Document parse(java.lang.String) throws java.io.IOException, org.xml.sax.SAXException;
  }

  public abstract class WebAssertion<E> {
    ctor public WebAssertion(android.support.test.espresso.web.model.Atom<E>);
    method protected abstract void checkResult(android.webkit.WebView, E);
    method public final android.support.test.espresso.web.model.Atom<E> getAtom();
    method public final android.support.test.espresso.ViewAssertion toViewAssertion(E);
  }

  public final class WebViewAssertions {
    method public static android.support.test.espresso.web.assertion.WebAssertion<org.w3c.dom.Document> webContent(org.hamcrest.Matcher<org.w3c.dom.Document>);
    method public static <E> android.support.test.espresso.web.assertion.WebAssertion<E> webMatches(android.support.test.espresso.web.model.Atom<E>, org.hamcrest.Matcher<E>, android.support.test.espresso.web.assertion.WebViewAssertions.ResultDescriber<? super E>);
    method public static <E> android.support.test.espresso.web.assertion.WebAssertion<E> webMatches(android.support.test.espresso.web.model.Atom<E>, org.hamcrest.Matcher<E>);
  }

  public static abstract interface WebViewAssertions.ResultDescriber<E> {
    method public abstract java.lang.String apply(E);
  }

}

package android.support.test.espresso.web.matcher {

  public final class AmbiguousElementMatcherException extends java.lang.RuntimeException implements android.support.test.espresso.EspressoException {
    ctor public AmbiguousElementMatcherException(java.lang.String);
  }

  public final class DomMatchers {
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> containingTextInBody(java.lang.String);
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> elementById(java.lang.String, org.hamcrest.Matcher<org.w3c.dom.Element>);
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> elementByXPath(java.lang.String, org.hamcrest.Matcher<org.w3c.dom.Element>);
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> hasElementWithId(java.lang.String);
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> hasElementWithXpath(java.lang.String);
    method public static org.hamcrest.Matcher<org.w3c.dom.Document> withBody(org.hamcrest.Matcher<org.w3c.dom.Element>);
    method public static org.hamcrest.Matcher<org.w3c.dom.Element> withTextContent(java.lang.String);
    method public static org.hamcrest.Matcher<org.w3c.dom.Element> withTextContent(org.hamcrest.Matcher<java.lang.String>);
  }

}

package android.support.test.espresso.web.model {

  public abstract interface Atom<R> {
    method public abstract java.util.List<java.lang.Object> getArguments(android.support.test.espresso.web.model.ElementReference);
    method public abstract java.lang.String getScript();
    method public abstract R transform(android.support.test.espresso.web.model.Evaluation);
  }

  public final class Atoms {
    method public static <E> android.support.test.espresso.web.model.TransformingAtom.Transformer<android.support.test.espresso.web.model.Evaluation, E> castOrDie(java.lang.Class<E>);
    method public static android.support.test.espresso.web.model.Atom<java.lang.String> getCurrentUrl();
    method public static android.support.test.espresso.web.model.Atom<java.lang.String> getTitle();
    method public static <O> android.support.test.espresso.web.model.Atom<O> script(java.lang.String, android.support.test.espresso.web.model.TransformingAtom.Transformer<android.support.test.espresso.web.model.Evaluation, O>);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.Evaluation> script(java.lang.String);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.Evaluation> scriptWithArgs(java.lang.String, java.util.List<java.lang.Object>);
    method public static <I, O> android.support.test.espresso.web.model.Atom<O> transform(android.support.test.espresso.web.model.Atom<I>, android.support.test.espresso.web.model.TransformingAtom.Transformer<I, O>);
  }

  public final class ElementReference implements android.support.test.espresso.web.model.JSONAble {
    method public java.lang.String toJSONString();
  }

  public final class Evaluation implements android.support.test.espresso.web.model.JSONAble android.os.Parcelable {
    ctor protected Evaluation(android.os.Parcel);
    method public int describeContents();
    method public java.lang.String getMessage();
    method public int getStatus();
    method public java.lang.Object getValue();
    method public boolean hasMessage();
    method public void readFromParcel(android.os.Parcel);
    method public java.lang.String toJSONString();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.support.test.espresso.web.model.Evaluation> CREATOR;
  }

  public abstract interface JSONAble {
    method public abstract java.lang.String toJSONString();
  }

  public static abstract interface JSONAble.DeJSONFactory {
    method public abstract java.lang.Object attemptDeJSONize(java.util.Map<java.lang.String, java.lang.Object>);
  }

  public final class ModelCodec {
    method public static void addDeJSONFactory(android.support.test.espresso.web.model.JSONAble.DeJSONFactory);
    method public static android.support.test.espresso.web.model.Evaluation decodeEvaluation(java.lang.String);
    method public static java.lang.String encode(java.lang.Object);
    method public static void removeDeJSONFactory(android.support.test.espresso.web.model.JSONAble.DeJSONFactory);
  }

  public class SimpleAtom implements android.support.test.espresso.web.model.Atom {
    ctor public SimpleAtom(java.lang.String);
    ctor public SimpleAtom(java.lang.String, android.support.test.espresso.web.model.SimpleAtom.ElementReferencePlacement);
    method public final java.util.List<java.lang.Object> getArguments(android.support.test.espresso.web.model.ElementReference);
    method protected java.util.List<java.lang.Object> getNonContextualArguments();
    method public final java.lang.String getScript();
    method protected android.support.test.espresso.web.model.Evaluation handleBadEvaluation(android.support.test.espresso.web.model.Evaluation);
    method protected void handleNoElementReference();
    method public final android.support.test.espresso.web.model.Evaluation transform(android.support.test.espresso.web.model.Evaluation);
  }

  public static final class SimpleAtom.ElementReferencePlacement extends java.lang.Enum {
    method public static android.support.test.espresso.web.model.SimpleAtom.ElementReferencePlacement valueOf(java.lang.String);
    method public static final android.support.test.espresso.web.model.SimpleAtom.ElementReferencePlacement[] values();
    enum_constant public static final android.support.test.espresso.web.model.SimpleAtom.ElementReferencePlacement FIRST;
    enum_constant public static final android.support.test.espresso.web.model.SimpleAtom.ElementReferencePlacement LAST;
  }

  public class TransformingAtom<I, O> implements android.support.test.espresso.web.model.Atom {
    ctor public TransformingAtom(android.support.test.espresso.web.model.Atom<I>, android.support.test.espresso.web.model.TransformingAtom.Transformer<I, O>);
    method public java.util.List<java.lang.Object> getArguments(android.support.test.espresso.web.model.ElementReference);
    method public java.lang.String getScript();
    method public O transform(android.support.test.espresso.web.model.Evaluation);
  }

  public static abstract interface TransformingAtom.Transformer<I, O> {
    method public abstract O apply(I);
  }

  public final class WindowReference implements android.support.test.espresso.web.model.JSONAble {
    method public java.lang.String toJSONString();
  }

}

package android.support.test.espresso.web.sugar {

  public final class Web {
    ctor public Web();
    method public static android.support.test.espresso.web.sugar.Web.WebInteraction<java.lang.Void> onWebView();
    method public static android.support.test.espresso.web.sugar.Web.WebInteraction<java.lang.Void> onWebView(org.hamcrest.Matcher<android.view.View>);
  }

  public static class Web.WebInteraction<R> {
    method public <E> android.support.test.espresso.web.sugar.Web.WebInteraction<E> check(android.support.test.espresso.web.assertion.WebAssertion<E>);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> forceJavascriptEnabled();
    method public R get();
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> inWindow(android.support.test.espresso.web.model.WindowReference);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> inWindow(android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.WindowReference>);
    method public <E> android.support.test.espresso.web.sugar.Web.WebInteraction<E> perform(android.support.test.espresso.web.model.Atom<E>);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> reset();
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> withContextualElement(android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.ElementReference>);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> withElement(android.support.test.espresso.web.model.ElementReference);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> withElement(android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.ElementReference>);
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> withNoTimeout();
    method public android.support.test.espresso.web.sugar.Web.WebInteraction<R> withTimeout(long, java.util.concurrent.TimeUnit);
  }

}

package android.support.test.espresso.web.webdriver {

  public final class DriverAtoms {
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.Evaluation> clearElement();
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.ElementReference> findElement(android.support.test.espresso.web.webdriver.Locator, java.lang.String);
    method public static android.support.test.espresso.web.model.Atom<java.util.List<android.support.test.espresso.web.model.ElementReference>> findMultipleElements(android.support.test.espresso.web.webdriver.Locator, java.lang.String);
    method public static android.support.test.espresso.web.model.Atom<java.lang.String> getText();
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.ElementReference> selectActiveElement();
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.WindowReference> selectFrameByIdOrName(java.lang.String, android.support.test.espresso.web.model.WindowReference);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.WindowReference> selectFrameByIdOrName(java.lang.String);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.WindowReference> selectFrameByIndex(int);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.WindowReference> selectFrameByIndex(int, android.support.test.espresso.web.model.WindowReference);
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.Evaluation> webClick();
    method public static android.support.test.espresso.web.model.Atom<android.support.test.espresso.web.model.Evaluation> webKeys(java.lang.String);
    method public static android.support.test.espresso.web.model.Atom<java.lang.Boolean> webScrollIntoView();
  }

  public final class Locator extends java.lang.Enum {
    method public java.lang.String getType();
    method public static android.support.test.espresso.web.webdriver.Locator valueOf(java.lang.String);
    method public static final android.support.test.espresso.web.webdriver.Locator[] values();
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator CLASS_NAME;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator CSS_SELECTOR;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator ID;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator LINK_TEXT;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator NAME;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator PARTIAL_LINK_TEXT;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator TAG_NAME;
    enum_constant public static final android.support.test.espresso.web.webdriver.Locator XPATH;
  }

}

package android.support.test.filters {

  public abstract class FlakyTest implements java.lang.annotation.Annotation {
  }

  public abstract class LargeTest implements java.lang.annotation.Annotation {
  }

  public abstract class MediumTest implements java.lang.annotation.Annotation {
  }

  public abstract class RequiresDevice implements java.lang.annotation.Annotation {
  }

  public abstract class SdkSuppress implements java.lang.annotation.Annotation {
  }

  public abstract class SmallTest implements java.lang.annotation.Annotation {
  }

  public abstract class Suppress implements java.lang.annotation.Annotation {
  }

}

package android.support.test.jank {

  public abstract class GfxMonitor implements java.lang.annotation.Annotation {
    field public static final java.lang.String KEY_AVG_FRAME_TIME_90TH_PERCENTILE = "gfx-avg-frame-time-90";
    field public static final java.lang.String KEY_AVG_FRAME_TIME_95TH_PERCENTILE = "gfx-avg-frame-time-95";
    field public static final java.lang.String KEY_AVG_FRAME_TIME_99TH_PERCENTILE = "gfx-avg-frame-time-99";
    field public static final java.lang.String KEY_AVG_HIGH_INPUT_LATENCY = "gfx-avg-high-input-latency";
    field public static final java.lang.String KEY_AVG_MISSED_VSYNC = "gfx-avg-missed-vsync";
    field public static final java.lang.String KEY_AVG_NUM_JANKY = "gfx-avg-jank";
    field public static final java.lang.String KEY_AVG_SLOW_BITMAP_UPLOADS = "gfx-avg-slow-bitmap-uploads";
    field public static final java.lang.String KEY_AVG_SLOW_DRAW = "gfx-avg-slow-draw";
    field public static final java.lang.String KEY_AVG_SLOW_UI_THREAD = "gfx-avg-slow-ui-thread";
    field public static final java.lang.String KEY_MAX_FRAME_TIME_90TH_PERCENTILE = "gfx-max-frame-time-90";
    field public static final java.lang.String KEY_MAX_FRAME_TIME_95TH_PERCENTILE = "gfx-max-frame-time-95";
    field public static final java.lang.String KEY_MAX_FRAME_TIME_99TH_PERCENTILE = "gfx-max-frame-time-99";
    field public static final java.lang.String KEY_MAX_HIGH_INPUT_LATENCY = "gfx-max-high-input-latency";
    field public static final java.lang.String KEY_MAX_MISSED_VSYNC = "gfx-max-missed-vsync";
    field public static final java.lang.String KEY_MAX_NUM_JANKY = "gfx-max-jank";
    field public static final java.lang.String KEY_MAX_SLOW_BITMAP_UPLOADS = "gfx-max-slow-bitmap-uploads";
    field public static final java.lang.String KEY_MAX_SLOW_DRAW = "gfx-max-slow-draw";
    field public static final java.lang.String KEY_MAX_SLOW_UI_THREAD = "gfx-max-slow-ui-thread";
  }

  public abstract class JankTest implements java.lang.annotation.Annotation {
  }

  public class JankTestBase extends android.test.InstrumentationTestCase {
    ctor public JankTestBase();
    method public void afterLoop() throws java.lang.Exception;
    method public void afterTest(android.os.Bundle);
    method public void beforeLoop() throws java.lang.Exception;
    method public void beforeTest() throws java.lang.Exception;
    method protected final android.os.Bundle getArguments();
    method public final int getCurrentIteration();
  }

}

package android.support.test.rule {

  public class ActivityTestRule<T extends android.app.Activity> implements org.junit.rules.TestRule {
    ctor public ActivityTestRule(java.lang.Class<T>);
    ctor public ActivityTestRule(java.lang.Class<T>, boolean);
    ctor public ActivityTestRule(java.lang.Class<T>, boolean, boolean);
    ctor public ActivityTestRule(android.support.test.runner.intercepting.SingleActivityFactory<T>, boolean, boolean);
    ctor public ActivityTestRule(java.lang.Class<T>, java.lang.String, int, boolean, boolean);
    method protected void afterActivityFinished();
    method protected void afterActivityLaunched();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method protected void beforeActivityLaunched();
    method public void finishActivity();
    method public T getActivity();
    method protected android.content.Intent getActivityIntent();
    method public android.app.Instrumentation.ActivityResult getActivityResult();
    method public T launchActivity(android.content.Intent);
    method public void runOnUiThread(java.lang.Runnable) throws java.lang.Throwable;
  }

  public class DisableOnAndroidDebug implements org.junit.rules.TestRule {
    ctor public DisableOnAndroidDebug(org.junit.rules.TestRule);
    method public final org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method public boolean isDebugging();
  }

  public class GrantPermissionRule implements org.junit.rules.TestRule {
    method public final org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method public static android.support.test.rule.GrantPermissionRule grant(java.lang.String...);
  }

  public class ServiceTestRule implements org.junit.rules.TestRule {
    ctor public ServiceTestRule();
    method protected void afterService();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method protected void beforeService();
    method public android.os.IBinder bindService(android.content.Intent) throws java.util.concurrent.TimeoutException;
    method public android.os.IBinder bindService(android.content.Intent, android.content.ServiceConnection, int) throws java.util.concurrent.TimeoutException;
    method public void startService(android.content.Intent) throws java.util.concurrent.TimeoutException;
    method public void unbindService();
    method public static android.support.test.rule.ServiceTestRule withTimeout(long, java.util.concurrent.TimeUnit);
  }

  public deprecated class UiThreadTestRule implements org.junit.rules.TestRule {
    ctor public UiThreadTestRule();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method public void runOnUiThread(java.lang.Runnable) throws java.lang.Throwable;
    method protected boolean shouldRunOnUiThread(org.junit.runner.Description);
  }

}

package android.support.test.rule.logging {

  public class AtraceLogger {
    method public void atraceStart(java.util.Set<java.lang.String>, int, int, java.io.File, java.lang.String) throws java.io.IOException;
    method public void atraceStop() throws java.io.IOException, java.lang.InterruptedException;
    method public static android.support.test.rule.logging.AtraceLogger getAtraceLoggerInstance(android.app.Instrumentation);
  }

}

package android.support.test.rule.provider {

  public class ProviderTestRule implements org.junit.rules.TestRule {
    method protected void afterProviderCleanedUp();
    method public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description);
    method protected void beforeProviderSetup();
    method public android.content.ContentResolver getResolver();
    method public void revokePermission(java.lang.String);
    method public void runDatabaseCommands(java.lang.String, java.lang.String...);
  }

  public static class ProviderTestRule.Builder {
    ctor public ProviderTestRule.Builder(java.lang.Class<T>, java.lang.String);
    method public <T extends android.content.ContentProvider> android.support.test.rule.provider.ProviderTestRule.Builder addProvider(java.lang.Class<T>, java.lang.String);
    method public android.support.test.rule.provider.ProviderTestRule build();
    method public android.support.test.rule.provider.ProviderTestRule.Builder setDatabaseCommands(java.lang.String, java.lang.String...);
    method public android.support.test.rule.provider.ProviderTestRule.Builder setDatabaseCommandsFile(java.lang.String, java.io.File);
    method public android.support.test.rule.provider.ProviderTestRule.Builder setDatabaseFile(java.lang.String, java.io.File);
    method public android.support.test.rule.provider.ProviderTestRule.Builder setPrefix(java.lang.String);
  }

}

package android.support.test.runner {

  public final class AndroidJUnit4 extends org.junit.runner.Runner implements org.junit.runner.manipulation.Filterable org.junit.runner.manipulation.Sortable {
    ctor public AndroidJUnit4(java.lang.Class<?>, android.support.test.internal.util.AndroidRunnerParams) throws org.junit.runners.model.InitializationError;
    ctor public AndroidJUnit4(java.lang.Class<?>) throws org.junit.runners.model.InitializationError;
    method public void filter(org.junit.runner.manipulation.Filter) throws org.junit.runner.manipulation.NoTestsRemainException;
    method public org.junit.runner.Description getDescription();
    method public void run(org.junit.runner.notification.RunNotifier);
    method public void sort(org.junit.runner.manipulation.Sorter);
  }

  public class AndroidJUnitRunner extends android.support.test.runner.MonitoringInstrumentation implements android.support.test.orchestrator.instrumentationlistener.OrchestratedInstrumentationListener.OnConnectListener {
    ctor public AndroidJUnitRunner();
    method public void onOrchestratorConnect();
  }

  public class MonitoringInstrumentation extends android.support.test.internal.runner.hidden.ExposedInstrumentationApi {
    ctor public MonitoringInstrumentation();
    method protected void dumpThreadStateToOutputs(java.lang.String);
    method protected java.lang.String getThreadState();
    method protected void installMultidex();
    method protected void installOldMultiDex(java.lang.Class<?>) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException;
    method public void interceptActivityUsing(android.support.test.runner.intercepting.InterceptingActivityFactory);
    method protected boolean isPrimaryInstrProcess(java.lang.String);
    method protected final void setJsBridgeClassName(java.lang.String);
    method protected void specifyDexMakerCacheProperty();
    method public void useDefaultInterceptingActivityFactory();
    method protected void waitForActivitiesToComplete();
  }

  public class MonitoringInstrumentation.ActivityFinisher implements java.lang.Runnable {
    ctor public MonitoringInstrumentation.ActivityFinisher();
    method public void run();
  }

  public class UsageTrackerFacilitator implements android.support.test.internal.runner.tracker.UsageTracker {
    ctor public UsageTrackerFacilitator(android.support.test.internal.runner.RunnerArgs);
    ctor public UsageTrackerFacilitator(boolean);
    method public void registerUsageTracker(android.support.test.internal.runner.tracker.UsageTracker);
    method public void sendUsages();
    method public boolean shouldTrackUsage();
    method public void trackUsage(java.lang.String, java.lang.String);
  }

}

package android.support.test.runner.intent {

  public abstract interface IntentCallback {
    method public abstract void onIntentSent(android.content.Intent);
  }

  public abstract interface IntentMonitor {
    method public abstract void addIntentCallback(android.support.test.runner.intent.IntentCallback);
    method public abstract void removeIntentCallback(android.support.test.runner.intent.IntentCallback);
  }

  public final class IntentMonitorRegistry {
    method public static android.support.test.runner.intent.IntentMonitor getInstance();
    method public static void registerInstance(android.support.test.runner.intent.IntentMonitor);
  }

  public abstract interface IntentStubber {
    method public abstract android.app.Instrumentation.ActivityResult getActivityResultForIntent(android.content.Intent);
  }

  public final class IntentStubberRegistry {
    method public static android.support.test.runner.intent.IntentStubber getInstance();
    method public static boolean isLoaded();
    method public static void load(android.support.test.runner.intent.IntentStubber);
    method public static synchronized void reset();
  }

}

package android.support.test.runner.intercepting {

  public abstract interface InterceptingActivityFactory {
    method public abstract android.app.Activity create(java.lang.ClassLoader, java.lang.String, android.content.Intent);
    method public abstract boolean shouldIntercept(java.lang.ClassLoader, java.lang.String, android.content.Intent);
  }

  public abstract class SingleActivityFactory<T extends android.app.Activity> implements android.support.test.runner.intercepting.InterceptingActivityFactory {
    ctor public SingleActivityFactory(java.lang.Class<T>);
    method public final android.app.Activity create(java.lang.ClassLoader, java.lang.String, android.content.Intent);
    method protected abstract T create(android.content.Intent);
    method public final java.lang.Class<T> getActivityClassToIntercept();
    method public final boolean shouldIntercept(java.lang.ClassLoader, java.lang.String, android.content.Intent);
  }

}

package android.support.test.runner.lifecycle {

  public abstract interface ActivityLifecycleCallback {
    method public abstract void onActivityLifecycleChanged(android.app.Activity, android.support.test.runner.lifecycle.Stage);
  }

  public abstract interface ActivityLifecycleMonitor {
    method public abstract void addLifecycleCallback(android.support.test.runner.lifecycle.ActivityLifecycleCallback);
    method public abstract java.util.Collection<android.app.Activity> getActivitiesInStage(android.support.test.runner.lifecycle.Stage);
    method public abstract android.support.test.runner.lifecycle.Stage getLifecycleStageOf(android.app.Activity);
    method public abstract void removeLifecycleCallback(android.support.test.runner.lifecycle.ActivityLifecycleCallback);
  }

  public final class ActivityLifecycleMonitorRegistry {
    method public static android.support.test.runner.lifecycle.ActivityLifecycleMonitor getInstance();
    method public static void registerInstance(android.support.test.runner.lifecycle.ActivityLifecycleMonitor);
  }

  public abstract interface ApplicationLifecycleCallback {
    method public abstract void onApplicationLifecycleChanged(android.app.Application, android.support.test.runner.lifecycle.ApplicationStage);
  }

  public abstract interface ApplicationLifecycleMonitor {
    method public abstract void addLifecycleCallback(android.support.test.runner.lifecycle.ApplicationLifecycleCallback);
    method public abstract void removeLifecycleCallback(android.support.test.runner.lifecycle.ApplicationLifecycleCallback);
  }

  public final class ApplicationLifecycleMonitorRegistry {
    method public static android.support.test.runner.lifecycle.ApplicationLifecycleMonitor getInstance();
    method public static void registerInstance(android.support.test.runner.lifecycle.ApplicationLifecycleMonitor);
  }

  public final class ApplicationStage extends java.lang.Enum {
    method public static android.support.test.runner.lifecycle.ApplicationStage valueOf(java.lang.String);
    method public static final android.support.test.runner.lifecycle.ApplicationStage[] values();
    enum_constant public static final android.support.test.runner.lifecycle.ApplicationStage CREATED;
    enum_constant public static final android.support.test.runner.lifecycle.ApplicationStage PRE_ON_CREATE;
  }

  public final class Stage extends java.lang.Enum {
    method public static android.support.test.runner.lifecycle.Stage valueOf(java.lang.String);
    method public static final android.support.test.runner.lifecycle.Stage[] values();
    enum_constant public static final android.support.test.runner.lifecycle.Stage CREATED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage DESTROYED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage PAUSED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage PRE_ON_CREATE;
    enum_constant public static final android.support.test.runner.lifecycle.Stage RESTARTED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage RESUMED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage STARTED;
    enum_constant public static final android.support.test.runner.lifecycle.Stage STOPPED;
  }

}

package android.support.test.runner.permission {

  public class PermissionRequester {
    ctor public PermissionRequester();
    method public void addPermissions(java.lang.String...);
    method public void requestPermissions();
    method protected void setAndroidRuntimeVersion(int);
  }

  public abstract class RequestPermissionCallable implements java.util.concurrent.Callable {
    ctor public RequestPermissionCallable(android.support.test.runner.permission.ShellCommand, android.content.Context, java.lang.String);
    method protected java.lang.String getPermission();
    method protected android.support.test.runner.permission.ShellCommand getShellCommand();
    method protected boolean isPermissionGranted();
  }

  public static final class RequestPermissionCallable.Result extends java.lang.Enum {
    method public static android.support.test.runner.permission.RequestPermissionCallable.Result valueOf(java.lang.String);
    method public static final android.support.test.runner.permission.RequestPermissionCallable.Result[] values();
    enum_constant public static final android.support.test.runner.permission.RequestPermissionCallable.Result FAILURE;
    enum_constant public static final android.support.test.runner.permission.RequestPermissionCallable.Result SUCCESS;
  }

  public abstract class ShellCommand {
    ctor public ShellCommand();
  }

}

package android.support.test.runner.screenshot {

  public class BasicScreenCaptureProcessor implements android.support.test.runner.screenshot.ScreenCaptureProcessor {
    ctor public BasicScreenCaptureProcessor();
    method protected java.lang.String getDefaultFilename();
    method protected java.lang.String getFilename(java.lang.String);
    method public java.lang.String process(android.support.test.runner.screenshot.ScreenCapture) throws java.io.IOException;
    field protected java.lang.String mDefaultFilenamePrefix;
    field protected java.io.File mDefaultScreenshotPath;
    field protected java.lang.String mFileNameDelimiter;
    field protected java.lang.String mTag;
  }

  public final class ScreenCapture {
    method public android.graphics.Bitmap getBitmap();
    method public android.graphics.Bitmap.CompressFormat getFormat();
    method public java.lang.String getName();
    method public void process() throws java.io.IOException;
    method public void process(java.util.Set<android.support.test.runner.screenshot.ScreenCaptureProcessor>) throws java.io.IOException;
    method public android.support.test.runner.screenshot.ScreenCapture setFormat(android.graphics.Bitmap.CompressFormat);
    method public android.support.test.runner.screenshot.ScreenCapture setName(java.lang.String);
  }

  public abstract interface ScreenCaptureProcessor {
    method public abstract java.lang.String process(android.support.test.runner.screenshot.ScreenCapture) throws java.io.IOException;
  }

  public final class Screenshot {
    ctor public Screenshot();
    method public static void addScreenCaptureProcessors(java.util.Set<android.support.test.runner.screenshot.ScreenCaptureProcessor>);
    method public static android.support.test.runner.screenshot.ScreenCapture capture() throws android.support.test.runner.screenshot.Screenshot.ScreenShotException;
    method public static android.support.test.runner.screenshot.ScreenCapture capture(android.app.Activity) throws android.support.test.runner.screenshot.Screenshot.ScreenShotException;
    method public static android.support.test.runner.screenshot.ScreenCapture capture(android.view.View) throws android.support.test.runner.screenshot.Screenshot.ScreenShotException;
    method public static void setScreenshotProcessors(java.util.Set<android.support.test.runner.screenshot.ScreenCaptureProcessor>);
  }

  public class UiAutomationWrapper {
    method public android.graphics.Bitmap takeScreenshot();
  }

}

package android.support.test.uiautomator {

  public class By {
    method public static android.support.test.uiautomator.BySelector checkable(boolean);
    method public static android.support.test.uiautomator.BySelector checked(boolean);
    method public static android.support.test.uiautomator.BySelector clazz(java.lang.String);
    method public static android.support.test.uiautomator.BySelector clazz(java.lang.String, java.lang.String);
    method public static android.support.test.uiautomator.BySelector clazz(java.lang.Class);
    method public static android.support.test.uiautomator.BySelector clazz(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.BySelector clickable(boolean);
    method public static android.support.test.uiautomator.BySelector copy(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.BySelector depth(int);
    method public static android.support.test.uiautomator.BySelector desc(java.lang.String);
    method public static android.support.test.uiautomator.BySelector desc(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.BySelector descContains(java.lang.String);
    method public static android.support.test.uiautomator.BySelector descEndsWith(java.lang.String);
    method public static android.support.test.uiautomator.BySelector descStartsWith(java.lang.String);
    method public static android.support.test.uiautomator.BySelector enabled(boolean);
    method public static android.support.test.uiautomator.BySelector focusable(boolean);
    method public static android.support.test.uiautomator.BySelector focused(boolean);
    method public static android.support.test.uiautomator.BySelector hasChild(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.BySelector hasDescendant(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.BySelector hasDescendant(android.support.test.uiautomator.BySelector, int);
    method public static android.support.test.uiautomator.BySelector longClickable(boolean);
    method public static android.support.test.uiautomator.BySelector pkg(java.lang.String);
    method public static android.support.test.uiautomator.BySelector pkg(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.BySelector res(java.lang.String);
    method public static android.support.test.uiautomator.BySelector res(java.lang.String, java.lang.String);
    method public static android.support.test.uiautomator.BySelector res(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.BySelector scrollable(boolean);
    method public static android.support.test.uiautomator.BySelector selected(boolean);
    method public static android.support.test.uiautomator.BySelector text(java.lang.String);
    method public static android.support.test.uiautomator.BySelector text(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.BySelector textContains(java.lang.String);
    method public static android.support.test.uiautomator.BySelector textEndsWith(java.lang.String);
    method public static android.support.test.uiautomator.BySelector textStartsWith(java.lang.String);
  }

  public class BySelector {
    method public android.support.test.uiautomator.BySelector checkable(boolean);
    method public android.support.test.uiautomator.BySelector checked(boolean);
    method public android.support.test.uiautomator.BySelector clazz(java.lang.String);
    method public android.support.test.uiautomator.BySelector clazz(java.lang.String, java.lang.String);
    method public android.support.test.uiautomator.BySelector clazz(java.lang.Class);
    method public android.support.test.uiautomator.BySelector clazz(java.util.regex.Pattern);
    method public android.support.test.uiautomator.BySelector clickable(boolean);
    method public android.support.test.uiautomator.BySelector depth(int);
    method public android.support.test.uiautomator.BySelector depth(int, int);
    method public android.support.test.uiautomator.BySelector desc(java.lang.String);
    method public android.support.test.uiautomator.BySelector desc(java.util.regex.Pattern);
    method public android.support.test.uiautomator.BySelector descContains(java.lang.String);
    method public android.support.test.uiautomator.BySelector descEndsWith(java.lang.String);
    method public android.support.test.uiautomator.BySelector descStartsWith(java.lang.String);
    method public android.support.test.uiautomator.BySelector enabled(boolean);
    method public android.support.test.uiautomator.BySelector focusable(boolean);
    method public android.support.test.uiautomator.BySelector focused(boolean);
    method public android.support.test.uiautomator.BySelector hasChild(android.support.test.uiautomator.BySelector);
    method public android.support.test.uiautomator.BySelector hasDescendant(android.support.test.uiautomator.BySelector);
    method public android.support.test.uiautomator.BySelector hasDescendant(android.support.test.uiautomator.BySelector, int);
    method public android.support.test.uiautomator.BySelector longClickable(boolean);
    method public android.support.test.uiautomator.BySelector maxDepth(int);
    method public android.support.test.uiautomator.BySelector minDepth(int);
    method public android.support.test.uiautomator.BySelector pkg(java.lang.String);
    method public android.support.test.uiautomator.BySelector pkg(java.util.regex.Pattern);
    method public android.support.test.uiautomator.BySelector res(java.lang.String);
    method public android.support.test.uiautomator.BySelector res(java.lang.String, java.lang.String);
    method public android.support.test.uiautomator.BySelector res(java.util.regex.Pattern);
    method public android.support.test.uiautomator.BySelector scrollable(boolean);
    method public android.support.test.uiautomator.BySelector selected(boolean);
    method public android.support.test.uiautomator.BySelector text(java.lang.String);
    method public android.support.test.uiautomator.BySelector text(java.util.regex.Pattern);
    method public android.support.test.uiautomator.BySelector textContains(java.lang.String);
    method public android.support.test.uiautomator.BySelector textEndsWith(java.lang.String);
    method public android.support.test.uiautomator.BySelector textStartsWith(java.lang.String);
  }

  public final class Configurator {
    method public long getActionAcknowledgmentTimeout();
    method public static android.support.test.uiautomator.Configurator getInstance();
    method public long getKeyInjectionDelay();
    method public long getScrollAcknowledgmentTimeout();
    method public int getToolType();
    method public int getUiAutomationFlags();
    method public long getWaitForIdleTimeout();
    method public long getWaitForSelectorTimeout();
    method public android.support.test.uiautomator.Configurator setActionAcknowledgmentTimeout(long);
    method public android.support.test.uiautomator.Configurator setKeyInjectionDelay(long);
    method public android.support.test.uiautomator.Configurator setScrollAcknowledgmentTimeout(long);
    method public android.support.test.uiautomator.Configurator setToolType(int);
    method public android.support.test.uiautomator.Configurator setUiAutomationFlags(int);
    method public android.support.test.uiautomator.Configurator setWaitForIdleTimeout(long);
    method public android.support.test.uiautomator.Configurator setWaitForSelectorTimeout(long);
  }

  public final class Direction extends java.lang.Enum {
    method public static android.support.test.uiautomator.Direction reverse(android.support.test.uiautomator.Direction);
    method public static android.support.test.uiautomator.Direction valueOf(java.lang.String);
    method public static final android.support.test.uiautomator.Direction[] values();
    enum_constant public static final android.support.test.uiautomator.Direction DOWN;
    enum_constant public static final android.support.test.uiautomator.Direction LEFT;
    enum_constant public static final android.support.test.uiautomator.Direction RIGHT;
    enum_constant public static final android.support.test.uiautomator.Direction UP;
  }

  public abstract class EventCondition<R> {
    ctor public EventCondition();
  }

  public abstract interface IAutomationSupport {
    method public abstract void sendStatus(int, android.os.Bundle);
  }

  public abstract class SearchCondition<R> {
    ctor public SearchCondition();
  }

  public class StaleObjectException extends java.lang.RuntimeException {
    ctor public StaleObjectException();
  }

  public class UiAutomatorInstrumentationTestRunner extends android.test.InstrumentationTestRunner {
    ctor public UiAutomatorInstrumentationTestRunner();
    method protected void initializeUiAutomatorTest(android.support.test.uiautomator.UiAutomatorTestCase);
  }

  public deprecated class UiAutomatorTestCase extends android.test.InstrumentationTestCase {
    ctor public UiAutomatorTestCase();
    method public deprecated android.support.test.uiautomator.IAutomationSupport getAutomationSupport();
    method public android.os.Bundle getParams();
    method public android.support.test.uiautomator.UiDevice getUiDevice();
    method public deprecated void sleep(long);
  }

  public class UiCollection extends android.support.test.uiautomator.UiObject {
    ctor public UiCollection(android.support.test.uiautomator.UiSelector);
    method public android.support.test.uiautomator.UiObject getChildByDescription(android.support.test.uiautomator.UiSelector, java.lang.String) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getChildByInstance(android.support.test.uiautomator.UiSelector, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getChildByText(android.support.test.uiautomator.UiSelector, java.lang.String) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public int getChildCount(android.support.test.uiautomator.UiSelector);
  }

  public class UiDevice {
    method public void clearLastTraversedText();
    method public boolean click(int, int);
    method public boolean drag(int, int, int, int, int);
    method public deprecated void dumpWindowHierarchy(java.lang.String);
    method public void dumpWindowHierarchy(java.io.File) throws java.io.IOException;
    method public void dumpWindowHierarchy(java.io.OutputStream) throws java.io.IOException;
    method public android.support.test.uiautomator.UiObject findObject(android.support.test.uiautomator.UiSelector);
    method public android.support.test.uiautomator.UiObject2 findObject(android.support.test.uiautomator.BySelector);
    method public java.util.List<android.support.test.uiautomator.UiObject2> findObjects(android.support.test.uiautomator.BySelector);
    method public void freezeRotation() throws android.os.RemoteException;
    method public deprecated java.lang.String getCurrentActivityName();
    method public java.lang.String getCurrentPackageName();
    method public int getDisplayHeight();
    method public int getDisplayRotation();
    method public android.graphics.Point getDisplaySizeDp();
    method public int getDisplayWidth();
    method public static deprecated android.support.test.uiautomator.UiDevice getInstance();
    method public static android.support.test.uiautomator.UiDevice getInstance(android.app.Instrumentation);
    method public java.lang.String getLastTraversedText();
    method public java.lang.String getLauncherPackageName();
    method public java.lang.String getProductName();
    method public boolean hasAnyWatcherTriggered();
    method public boolean hasObject(android.support.test.uiautomator.BySelector);
    method public boolean hasWatcherTriggered(java.lang.String);
    method public boolean isNaturalOrientation();
    method public boolean isScreenOn() throws android.os.RemoteException;
    method public boolean openNotification();
    method public boolean openQuickSettings();
    method public <R> R performActionAndWait(java.lang.Runnable, android.support.test.uiautomator.EventCondition<R>, long);
    method public boolean pressBack();
    method public boolean pressDPadCenter();
    method public boolean pressDPadDown();
    method public boolean pressDPadLeft();
    method public boolean pressDPadRight();
    method public boolean pressDPadUp();
    method public boolean pressDelete();
    method public boolean pressEnter();
    method public boolean pressHome();
    method public boolean pressKeyCode(int);
    method public boolean pressKeyCode(int, int);
    method public boolean pressMenu();
    method public boolean pressRecentApps() throws android.os.RemoteException;
    method public boolean pressSearch();
    method public void registerWatcher(java.lang.String, android.support.test.uiautomator.UiWatcher);
    method public void removeWatcher(java.lang.String);
    method public void resetWatcherTriggers();
    method public void runWatchers();
    method public void setCompressedLayoutHeirarchy(boolean);
    method public void setOrientationLeft() throws android.os.RemoteException;
    method public void setOrientationNatural() throws android.os.RemoteException;
    method public void setOrientationRight() throws android.os.RemoteException;
    method public void sleep() throws android.os.RemoteException;
    method public boolean swipe(int, int, int, int, int);
    method public boolean swipe(android.graphics.Point[], int);
    method public boolean takeScreenshot(java.io.File);
    method public boolean takeScreenshot(java.io.File, float, int);
    method public void unfreezeRotation() throws android.os.RemoteException;
    method public <R> R wait(android.support.test.uiautomator.SearchCondition<R>, long);
    method public void waitForIdle();
    method public void waitForIdle(long);
    method public boolean waitForWindowUpdate(java.lang.String, long);
    method public void wakeUp() throws android.os.RemoteException;
  }

  public class UiObject {
    ctor public deprecated UiObject(android.support.test.uiautomator.UiSelector);
    method public void clearTextField() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean click() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean clickAndWaitForNewWindow() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean clickAndWaitForNewWindow(long) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean clickBottomRight() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean clickTopLeft() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean dragTo(android.support.test.uiautomator.UiObject, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean dragTo(int, int, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean exists();
    method protected android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfo(long);
    method public android.graphics.Rect getBounds() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getChild(android.support.test.uiautomator.UiSelector) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public int getChildCount() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public java.lang.String getClassName() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public java.lang.String getContentDescription() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getFromParent(android.support.test.uiautomator.UiSelector) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public java.lang.String getPackageName() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public final android.support.test.uiautomator.UiSelector getSelector();
    method public java.lang.String getText() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.graphics.Rect getVisibleBounds() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isCheckable() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isChecked() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isClickable() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isEnabled() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isFocusable() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isFocused() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isLongClickable() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isScrollable() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean isSelected() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean longClick() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean longClickBottomRight() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean longClickTopLeft() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean performMultiPointerGesture(android.view.MotionEvent.PointerCoords...);
    method public boolean performTwoPointerGesture(android.graphics.Point, android.graphics.Point, android.graphics.Point, android.graphics.Point, int);
    method public boolean pinchIn(int, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean pinchOut(int, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean setText(java.lang.String) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean swipeDown(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean swipeLeft(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean swipeRight(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean swipeUp(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean waitForExists(long);
    method public boolean waitUntilGone(long);
    field protected static final int FINGER_TOUCH_HALF_WIDTH = 20; // 0x14
    field protected static final int SWIPE_MARGIN_LIMIT = 5; // 0x5
    field protected static final deprecated long WAIT_FOR_EVENT_TMEOUT = 3000L; // 0xbb8L
    field protected static final long WAIT_FOR_SELECTOR_POLL = 1000L; // 0x3e8L
    field protected static final deprecated long WAIT_FOR_SELECTOR_TIMEOUT = 10000L; // 0x2710L
    field protected static final long WAIT_FOR_WINDOW_TMEOUT = 5500L; // 0x157cL
  }

  public class UiObject2 {
    method public void clear();
    method public void click();
    method public void click(long);
    method public <R> R clickAndWait(android.support.test.uiautomator.EventCondition<R>, long);
    method public void drag(android.graphics.Point);
    method public void drag(android.graphics.Point, int);
    method public android.support.test.uiautomator.UiObject2 findObject(android.support.test.uiautomator.BySelector);
    method public java.util.List<android.support.test.uiautomator.UiObject2> findObjects(android.support.test.uiautomator.BySelector);
    method public boolean fling(android.support.test.uiautomator.Direction);
    method public boolean fling(android.support.test.uiautomator.Direction, int);
    method public java.lang.String getApplicationPackage();
    method public int getChildCount();
    method public java.util.List<android.support.test.uiautomator.UiObject2> getChildren();
    method public java.lang.String getClassName();
    method public java.lang.String getContentDescription();
    method public android.support.test.uiautomator.UiObject2 getParent();
    method public java.lang.String getResourceName();
    method public java.lang.String getText();
    method public android.graphics.Rect getVisibleBounds();
    method public android.graphics.Point getVisibleCenter();
    method public boolean hasObject(android.support.test.uiautomator.BySelector);
    method public boolean isCheckable();
    method public boolean isChecked();
    method public boolean isClickable();
    method public boolean isEnabled();
    method public boolean isFocusable();
    method public boolean isFocused();
    method public boolean isLongClickable();
    method public boolean isScrollable();
    method public boolean isSelected();
    method public void longClick();
    method public void pinchClose(float);
    method public void pinchClose(float, int);
    method public void pinchOpen(float);
    method public void pinchOpen(float, int);
    method public void recycle();
    method public boolean scroll(android.support.test.uiautomator.Direction, float);
    method public boolean scroll(android.support.test.uiautomator.Direction, float, int);
    method public void setGestureMargin(int);
    method public void setGestureMargins(int, int, int, int);
    method public void setText(java.lang.String);
    method public void swipe(android.support.test.uiautomator.Direction, float);
    method public void swipe(android.support.test.uiautomator.Direction, float, int);
    method public <R> R wait(android.support.test.uiautomator.UiObject2Condition<R>, long);
    method public <R> R wait(android.support.test.uiautomator.SearchCondition<R>, long);
  }

  public abstract class UiObject2Condition<R> {
    ctor public UiObject2Condition();
  }

  public class UiObjectNotFoundException extends java.lang.Exception {
    ctor public UiObjectNotFoundException(java.lang.String);
    ctor public UiObjectNotFoundException(java.lang.String, java.lang.Throwable);
    ctor public UiObjectNotFoundException(java.lang.Throwable);
  }

  public class UiScrollable extends android.support.test.uiautomator.UiCollection {
    ctor public UiScrollable(android.support.test.uiautomator.UiSelector);
    method protected boolean exists(android.support.test.uiautomator.UiSelector);
    method public boolean flingBackward() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean flingForward() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean flingToBeginning(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean flingToEnd(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getChildByDescription(android.support.test.uiautomator.UiSelector, java.lang.String, boolean) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiObject getChildByText(android.support.test.uiautomator.UiSelector, java.lang.String, boolean) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public int getMaxSearchSwipes();
    method public double getSwipeDeadZonePercentage();
    method public boolean scrollBackward() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollBackward(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollDescriptionIntoView(java.lang.String) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollForward() throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollForward(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollIntoView(android.support.test.uiautomator.UiObject) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollIntoView(android.support.test.uiautomator.UiSelector) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollTextIntoView(java.lang.String) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollToBeginning(int, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollToBeginning(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollToEnd(int, int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public boolean scrollToEnd(int) throws android.support.test.uiautomator.UiObjectNotFoundException;
    method public android.support.test.uiautomator.UiScrollable setAsHorizontalList();
    method public android.support.test.uiautomator.UiScrollable setAsVerticalList();
    method public android.support.test.uiautomator.UiScrollable setMaxSearchSwipes(int);
    method public android.support.test.uiautomator.UiScrollable setSwipeDeadZonePercentage(double);
  }

  public class UiSelector {
    ctor public UiSelector();
    method public android.support.test.uiautomator.UiSelector checkable(boolean);
    method public android.support.test.uiautomator.UiSelector checked(boolean);
    method public android.support.test.uiautomator.UiSelector childSelector(android.support.test.uiautomator.UiSelector);
    method public android.support.test.uiautomator.UiSelector className(java.lang.String);
    method public <T> android.support.test.uiautomator.UiSelector className(java.lang.Class<T>);
    method public android.support.test.uiautomator.UiSelector classNameMatches(java.lang.String);
    method public android.support.test.uiautomator.UiSelector clickable(boolean);
    method protected android.support.test.uiautomator.UiSelector cloneSelector();
    method public android.support.test.uiautomator.UiSelector description(java.lang.String);
    method public android.support.test.uiautomator.UiSelector descriptionContains(java.lang.String);
    method public android.support.test.uiautomator.UiSelector descriptionMatches(java.lang.String);
    method public android.support.test.uiautomator.UiSelector descriptionStartsWith(java.lang.String);
    method public android.support.test.uiautomator.UiSelector enabled(boolean);
    method public android.support.test.uiautomator.UiSelector focusable(boolean);
    method public android.support.test.uiautomator.UiSelector focused(boolean);
    method public android.support.test.uiautomator.UiSelector fromParent(android.support.test.uiautomator.UiSelector);
    method public android.support.test.uiautomator.UiSelector index(int);
    method public android.support.test.uiautomator.UiSelector instance(int);
    method public android.support.test.uiautomator.UiSelector longClickable(boolean);
    method public android.support.test.uiautomator.UiSelector packageName(java.lang.String);
    method public android.support.test.uiautomator.UiSelector packageNameMatches(java.lang.String);
    method public android.support.test.uiautomator.UiSelector resourceId(java.lang.String);
    method public android.support.test.uiautomator.UiSelector resourceIdMatches(java.lang.String);
    method public android.support.test.uiautomator.UiSelector scrollable(boolean);
    method public android.support.test.uiautomator.UiSelector selected(boolean);
    method public android.support.test.uiautomator.UiSelector text(java.lang.String);
    method public android.support.test.uiautomator.UiSelector textContains(java.lang.String);
    method public android.support.test.uiautomator.UiSelector textMatches(java.lang.String);
    method public android.support.test.uiautomator.UiSelector textStartsWith(java.lang.String);
  }

  public abstract interface UiWatcher {
    method public abstract boolean checkForCondition();
  }

  public class Until {
    ctor public Until();
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> checkable(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> checked(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> clickable(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descContains(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descEndsWith(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descEquals(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descMatches(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descMatches(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> descStartsWith(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> enabled(boolean);
    method public static android.support.test.uiautomator.SearchCondition<android.support.test.uiautomator.UiObject2> findObject(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.SearchCondition<java.util.List<android.support.test.uiautomator.UiObject2>> findObjects(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> focusable(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> focused(boolean);
    method public static android.support.test.uiautomator.SearchCondition<java.lang.Boolean> gone(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.SearchCondition<java.lang.Boolean> hasObject(android.support.test.uiautomator.BySelector);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> longClickable(boolean);
    method public static android.support.test.uiautomator.EventCondition<java.lang.Boolean> newWindow();
    method public static android.support.test.uiautomator.EventCondition<java.lang.Boolean> scrollFinished(android.support.test.uiautomator.Direction);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> scrollable(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> selected(boolean);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textContains(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textEndsWith(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textEquals(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textMatches(java.util.regex.Pattern);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textMatches(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textNotEquals(java.lang.String);
    method public static android.support.test.uiautomator.UiObject2Condition<java.lang.Boolean> textStartsWith(java.lang.String);
  }

}

