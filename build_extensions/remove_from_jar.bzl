"""Removes files / directories from jar (or any zip) file.

If overlapping_jars is present, then it also removes entries in the
primary jar that exists in any of the overlapping_jars.
"""

def remove_from_jar(
        name,
        jar,
        keep_spec,
        remove_spec = None,
        overlapping_jars = [],
        visibility = None,
        constraints = None,
        **kwargs):
    """Removes specified entries from a jar file.

    The entries to remove can be specified with with any combination of 'removes'
    and 'overlapping_jars'.
    It generates two relevant targets: <name> and lib<name>,
    where <name> target is pure genrule output, that has 'concrete' jar, while
    lib<name> is a java_library rule that contains <name> in its srcs.

    Args:
      name: Name of the remove jars target, String.
      jar: jar from which to remove files, label.
      keep_spec: Regex to match items to be retained in jar file.
      remove_spec: Regex of items to be removed from a jar file.
      overlapping_jars: jars containing entries to be removed from the main jar.
      visibility: (Optional) visibility of the rules generated by this macro.
      constraints: (Optional) constraints imposed on this rule as a Java library.
        Currently defaults to ["android"] for compatibility reasons, but this will
        be removed in the future.
      **kwargs: Args to be passed to genrule and java_library, so valid args are
        common set between those two:
          deprecation, distribs, licenses, obsolete, tags, testonly, visibility

    Usage:
      remove_from_jar(
        name = "jar_cleaned",
        keep_spec = "foo/bar/,*|bar/foo/,*",
        overlapping_jars = [":fooapp_deploy.jar"])
      Explanation:
        Removes all items not matching foo/bar/.* or bar/foo/.* from the jar file.
        Uses fooapp_deploy.jar overlapping jar, to remove entries in main
        jar that are also present in the overlapping jar.

      remove_from_jar(
        name = "jar_cleaned",
        keep_spec = "foo/bar.*"
        removes = [ "foo/bar/RemoveMe" ])
      Explanation:
        This will retain everything from foo/bar/.* except foo/bar/RemoveMe.
    """
    if not jar or jar == "":
        fail('"jar" attribute cannot be null or empty')

    if constraints == None:
        constraints = ["android"]

    srcs = [jar]
    message = ('Keeping %s from "%s." ' % (keep_spec, jar))
    message += ('Removing %s from "%s." ' % (remove_spec, jar)) if remove_spec else ""

    # Add overlapping_jars to sources if specified.
    for overlapping_jar in overlapping_jars:
        srcs += [overlapping_jar]
        message += (
            'Removing elements in "%s" that are present in overlapping jar "%s."' %
            (jar, overlapping_jar)
        )

    cmd = [
        "set +o pipefail;",
        "tmpdir=$$(mktemp -d);",
        "cp $(location %s) $@;" % jar,
        "chmod +w $@;",
        "$(location @local_jdk//:jar) tf $@ > $$tmpdir/file_list.txt;",
        "cat $$tmpdir/file_list.txt | ",
        'egrep -v "%s" | ' % keep_spec,
        "xargs --no-run-if-empty zip -d $@ >",
        "$$tmpdir/keep_from_jar_result.txt 2>&1 || {",
        "  RESULT=$$?;",
        "  cat $$tmpdir/keep_from_jar_result.txt;",
        "  exit $${RESULT};",
        " };",
    ]

    if remove_spec:
        cmd += [
            "$(location @local_jdk//:jar) tf $@ >",
            "$$tmpdir/remove_file_list.txt;",
            "cat $$tmpdir/remove_file_list.txt | ",
            'egrep "%s" | ' % remove_spec,
            "xargs --no-run-if-empty zip -d $@ >",
            "$$tmpdir/remove_from_jar_result.txt 2>&1 || {",
            "  RESULT=$$?;",
            "  cat $$tmpdir/remove_from_jar_result.txt;",
            "  exit $${RESULT};",
            " };",
        ]

    if overlapping_jars:
        for overlapping_jar in overlapping_jars:
            cmd += [
                ("$(location @local_jdk//:jar) tf $(location %s) >> " +
                 "$$tmpdir/overlapping_jar.txt;") %
                overlapping_jar,
            ]
        cmd += [
            "$(location @local_jdk//:jar) tf $@ >",
            "$$tmpdir/original_jar.txt;",
            "grep -F -x -f $$tmpdir/overlapping_jar.txt",
            "$$tmpdir/original_jar.txt",
            "| xargs --no-run-if-empty zip -d $@ >",
            "$$tmpdir/remove_from_overlapping_jar_result.txt 2>&1 || {",
            "  RESULT=$$?;",
            "  cat $$tmpdir/remove_from_overlapping_jar_result.txt;",
            "  exit $${RESULT};",
            " };",
        ]

    cmd += ["rm -rf $$tmpdir;"]

    native.genrule(
        name = name,
        srcs = srcs,
        outs = ["%s.jar" % name],
        tools = [
            "@local_jdk//:jar",

        ],
        message = message,
        visibility = visibility,
        cmd = " ".join(cmd),
        **kwargs
    )

    native.java_import(
        name = "lib%s" % name,
        jars = [name],
        constraints = constraints,
        visibility = visibility,
        **kwargs
    )
